{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Agnostic Imaging AI - Medical Imaging GenAI SaaS\n\n## Overview\n\nThis is a production-ready marketing and demo website for Agnostic Imaging AI, a medical imaging GenAI SaaS platform. The application showcases an OEM-agnostic solution that provides super-resolution and enhancement for X-Ray, CT, MRI, and Digital Pathology imaging through advanced AI technology. The website features a modern 3D design with a pure black theme, interactive demonstrations, and comprehensive information about the platform's capabilities.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React + TypeScript**: Modern React 18 with TypeScript for type safety and developer experience\n- **Vite**: Lightning-fast build tool and development server with hot module replacement\n- **Routing**: React Router DOM for client-side navigation with dedicated pages for each section\n- **State Management**: Zustand for lightweight, performant global state management\n- **3D Graphics**: React Three Fiber ecosystem with Drei helpers for procedural 3D medical gantry visualization\n- **UI Framework**: Shadcn/ui components built on Radix UI primitives with full accessibility support\n- **Styling**: TailwindCSS with custom medical-themed color variables and design system\n\n### Backend Architecture\n- **Express.js**: RESTful API server with middleware for logging, JSON parsing, and error handling\n- **TypeScript**: Full-stack type safety with shared schema definitions\n- **Storage Layer**: Abstract storage interface with in-memory implementation for development\n- **API Endpoints**: Contact form submission and demo job management with Zod validation\n- **Development Integration**: Vite middleware integration for seamless full-stack development\n\n### Data Storage\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Tables**: Users, contact submissions, and demo jobs with JSONB metadata support\n- **Environment**: Database URL configuration with automatic provisioning checks\n\n### Authentication & Security\n- **Magic Link Authentication**: Passwordless login system for enhanced security\n- **Form Validation**: React Hook Form with Zod schemas for comprehensive client and server-side validation\n- **HIPAA Compliance**: Framework ready for healthcare data protection requirements\n- **CORS & Security**: Express security middleware with appropriate headers\n\n### Design System\n- **Typography**: Inter for UI elements, DM Sans for headlines with medical-grade readability\n- **Color Palette**: Pure black background with medical cyan (#00E5FF) and violet (#7C4DFF) accents\n- **Components**: Modular component architecture with Badge, CTA, Section, and FeatureCard primitives\n- **Responsive Design**: Mobile-first approach with Tailwind breakpoints\n- **Accessibility**: Full keyboard navigation, screen reader support, and WCAG compliance\n\n### Content Management\n- **Static Content**: Markdown files for executive summaries and detailed technical documentation\n- **Dynamic Content**: JSON-based configuration for solutions, features, and site settings\n- **SEO Optimization**: React Helmet Async for meta tags, Open Graph, and structured data\n- **Asset Management**: Optimized image handling with proper alt text and lazy loading\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@tanstack/react-query**: Server state management and caching for API interactions\n- **react-router-dom**: Client-side routing and navigation\n- **react-helmet-async**: SEO and meta tag management\n- **framer-motion**: Animation library for smooth UI transitions\n\n### 3D Graphics Stack\n- **@react-three/fiber**: React renderer for Three.js scenes\n- **@react-three/drei**: Utility library with cameras, controls, and effects\n- **@react-three/postprocessing**: Bloom and visual effects for medical device visualization\n- **three**: Core 3D graphics library\n\n### UI Component Libraries\n- **@radix-ui/react-***: Comprehensive accessible component primitives\n- **lucide-react**: Modern icon library with medical and technical icons\n- **class-variance-authority**: Type-safe component variant management\n- **clsx & tailwind-merge**: Efficient className management utilities\n\n### Database & Validation\n- **drizzle-orm**: Type-safe ORM with PostgreSQL support\n- **drizzle-zod**: Integration between Drizzle schemas and Zod validation\n- **@neondatabase/serverless**: Serverless PostgreSQL database connection\n- **zod**: Runtime type validation and schema definition\n\n### Medical Imaging Specific\n- **react-compare-slider**: Before/after image comparison for demonstrating enhancement results\n- **cornerstone3d**: DICOM viewer integration for medical image display and manipulation\n- **date-fns**: Date formatting for medical timestamps and scheduling\n\n### Development & Build Tools\n- **vite**: Build tool with React plugin and development server\n- **typescript**: Static type checking across the entire application\n- **eslint & prettier**: Code quality and formatting tools\n- **@replit/vite-plugin-***: Replit-specific development enhancements and error handling\n\n### Authentication & Forms\n- **@hookform/resolvers**: React Hook Form integration with Zod validation\n- **zustand**: Lightweight state management for user sessions and preferences\n\n### Styling & Design\n- **tailwindcss**: Utility-first CSS framework with custom medical theme\n- **autoprefixer**: CSS vendor prefix automation\n- **postcss**: CSS processing and optimization","size_bytes":5566},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        'medical-cyan': 'hsl(187, 100%, 45%)',\n        'medical-violet': 'hsl(262, 100%, 65%)',\n      },\n      fontFamily: {\n        'inter': ['Inter', 'sans-serif'],\n        'dm-sans': ['DM Sans', 'sans-serif'],\n        'mono': ['JetBrains Mono', 'monospace'],\n      },\n      animation: {\n        'gantry-rotate': 'gantryRotate 20s linear infinite',\n        'scan-beam': 'scanBeam 3s ease-in-out infinite',\n        'float': 'float 6s ease-in-out infinite',\n        'counter': 'counter 2s ease-out forwards',\n        'pulse-glow': 'pulse-glow 2s ease-in-out infinite',\n      },\n      keyframes: {\n        gantryRotate: {\n          '0%': { transform: 'rotateY(0deg) rotateX(15deg)' },\n          '100%': { transform: 'rotateY(360deg) rotateX(15deg)' },\n        },\n        scanBeam: {\n          '0%, 100%': { \n            opacity: '0.3', \n            transform: 'scaleX(0.8)' \n          },\n          '50%': { \n            opacity: '0.8', \n            transform: 'scaleX(1.2)' \n          },\n        },\n        float: {\n          '0%, 100%': { transform: 'translateY(0px)' },\n          '50%': { transform: 'translateY(-20px)' },\n        },\n        counter: {\n          from: { \n            opacity: '0', \n            transform: 'translateY(20px)' \n          },\n          to: { \n            opacity: '1', \n            transform: 'translateY(0)' \n          },\n        },\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2827},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { z } from \"zod\";\nimport { storage } from \"./storage\";\n\n// Contact form schema\nconst contactFormSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  organization: z.string().optional(),\n  role: z.string().optional(),\n  interest: z.string().optional(),\n  message: z.string().optional(),\n  consent: z.boolean().refine(val => val === true, {\n    message: \"Consent is required\",\n  }),\n});\n\n// Demo job schema for API documentation examples\nconst demoJobSchema = z.object({\n  modality: z.enum([\"xray\", \"ct\", \"mri\", \"pathology\"]),\n  studyId: z.string(),\n  enhancement: z.enum([\"super-resolution\", \"denoising\", \"harmonization\"]),\n  strength: z.number().min(0).max(100).default(85),\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Contact form submission endpoint\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const contactData = contactFormSchema.parse(req.body);\n      \n      // Store the contact submission\n      const submission = await storage.createContactSubmission(contactData);\n      \n      console.log(\"Contact form submission:\", {\n        id: submission.id,\n        email: contactData.email,\n        organization: contactData.organization,\n        timestamp: new Date().toISOString(),\n      });\n      \n      res.json({ \n        success: true, \n        message: \"Thank you for your message! We'll be in touch soon.\",\n        submissionId: submission.id,\n      });\n    } catch (error) {\n      console.error(\"Contact form error:\", error);\n      \n      if (error instanceof z.ZodError) {\n        res.status(400).json({\n          success: false,\n          message: \"Invalid form data\",\n          errors: error.errors,\n        });\n      } else {\n        res.status(500).json({\n          success: false,\n          message: \"Internal server error. Please try again later.\",\n        });\n      }\n    }\n  });\n\n  // Demo job endpoints for API documentation examples\n  app.post(\"/api/demo-jobs\", async (req, res) => {\n    try {\n      const jobData = demoJobSchema.parse(req.body);\n      \n      // Create a mock demo job\n      const job = await storage.createDemoJob(jobData);\n      \n      res.json({\n        jobId: job.id,\n        status: \"processing\",\n        estimatedTime: getEstimatedProcessingTime(jobData.modality),\n        message: \"Enhancement job started successfully\",\n      });\n    } catch (error) {\n      console.error(\"Demo job creation error:\", error);\n      \n      if (error instanceof z.ZodError) {\n        res.status(400).json({\n          success: false,\n          message: \"Invalid job parameters\",\n          errors: error.errors,\n        });\n      } else {\n        res.status(500).json({\n          success: false,\n          message: \"Failed to create demo job\",\n        });\n      }\n    }\n  });\n\n  app.get(\"/api/demo-jobs/:id\", async (req, res) => {\n    try {\n      const jobId = req.params.id;\n      const job = await storage.getDemoJob(jobId);\n      \n      if (!job) {\n        res.status(404).json({\n          success: false,\n          message: \"Job not found\",\n        });\n        return;\n      }\n      \n      // Simulate job progression\n      const now = Date.now();\n      const elapsed = now - new Date(job.createdAt).getTime();\n      const estimatedDuration = getEstimatedProcessingTime(job.modality) * 1000; // Convert to ms\n      \n      let status = job.status;\n      let progress = 0;\n      \n      if (elapsed < estimatedDuration) {\n        status = \"processing\";\n        progress = Math.min(95, (elapsed / estimatedDuration) * 100);\n      } else {\n        status = \"completed\";\n        progress = 100;\n      }\n      \n      res.json({\n        jobId: job.id,\n        status,\n        progress: Math.round(progress),\n        modality: job.modality,\n        enhancement: job.enhancement,\n        strength: job.strength,\n        createdAt: job.createdAt,\n        estimatedCompletion: new Date(new Date(job.createdAt).getTime() + estimatedDuration).toISOString(),\n        ...(status === \"completed\" && {\n          resultUrl: `/api/demo-results/${job.id}`,\n          downloadUrl: `/api/demo-downloads/${job.id}`,\n        }),\n      });\n    } catch (error) {\n      console.error(\"Demo job retrieval error:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Failed to retrieve job status\",\n      });\n    }\n  });\n\n  // Health check endpoint\n  app.get(\"/api/health\", (req, res) => {\n    res.json({\n      status: \"healthy\",\n      timestamp: new Date().toISOString(),\n      version: \"1.0.0\",\n      services: {\n        database: \"connected\",\n        storage: \"available\",\n        ai_processing: \"operational\",\n      },\n    });\n  });\n\n  // API status endpoint for documentation\n  app.get(\"/api/status\", (req, res) => {\n    res.json({\n      service: \"Agnostic Imaging AI API\",\n      version: \"v1.0.0\",\n      status: \"operational\",\n      uptime: process.uptime(),\n      endpoints: {\n        contact: \"/api/contact\",\n        demo_jobs: \"/api/demo-jobs\",\n        health: \"/api/health\",\n      },\n      rateLimit: {\n        requests_per_minute: 100,\n        burst_limit: 20,\n      },\n    });\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Helper function to get estimated processing times\nfunction getEstimatedProcessingTime(modality: string): number {\n  const times = {\n    xray: 45, // 45 seconds\n    ct: 180, // 3 minutes\n    mri: 300, // 5 minutes\n    pathology: 120, // 2 minutes\n  };\n  \n  return times[modality as keyof typeof times] || 60;\n}\n","size_bytes":5684},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, integer, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Contact submissions table\nexport const contactSubmissions = pgTable(\"contact_submissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  organization: text(\"organization\"),\n  role: text(\"role\"),\n  interest: text(\"interest\"),\n  message: text(\"message\"),\n  consent: boolean(\"consent\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  processed: boolean(\"processed\").default(false).notNull(),\n  metadata: jsonb(\"metadata\"),\n});\n\n// Demo jobs table for API documentation examples\nexport const demoJobs = pgTable(\"demo_jobs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  modality: text(\"modality\").notNull(), // xray, ct, mri, pathology\n  studyId: text(\"study_id\").notNull(),\n  enhancement: text(\"enhancement\").notNull(), // super-resolution, denoising, harmonization\n  strength: integer(\"strength\").default(85).notNull(),\n  status: text(\"status\").default(\"processing\").notNull(), // processing, completed, failed\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  completedAt: timestamp(\"completed_at\"),\n  metadata: jsonb(\"metadata\"),\n});\n\n// User schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Contact submission schemas\nexport const insertContactSubmissionSchema = createInsertSchema(contactSubmissions).omit({\n  id: true,\n  createdAt: true,\n  processed: true,\n  metadata: true,\n});\n\nexport type InsertContactSubmission = z.infer<typeof insertContactSubmissionSchema>;\nexport type ContactSubmission = typeof contactSubmissions.$inferSelect;\n\n// Demo job schemas\nexport const insertDemoJobSchema = createInsertSchema(demoJobs).omit({\n  id: true,\n  status: true,\n  createdAt: true,\n  completedAt: true,\n  metadata: true,\n});\n\nexport type InsertDemoJob = z.infer<typeof insertDemoJobSchema>;\nexport type DemoJob = typeof demoJobs.$inferSelect;\n\n// Enhanced validation schemas for API endpoints\nexport const contactFormSchema = insertContactSubmissionSchema.extend({\n  firstName: z.string().min(1, \"First name is required\").max(50, \"First name too long\"),\n  lastName: z.string().min(1, \"Last name is required\").max(50, \"Last name too long\"),\n  email: z.string().email(\"Invalid email address\").max(255, \"Email too long\"),\n  organization: z.string().max(100, \"Organization name too long\").optional(),\n  role: z.enum([\"radiologist\", \"it-director\", \"administrator\", \"researcher\", \"other\"]).optional(),\n  interest: z.enum([\"xray\", \"ct\", \"mri\", \"pathology\", \"integration\", \"enterprise\"]).optional(),\n  message: z.string().max(2000, \"Message too long\").optional(),\n  consent: z.boolean().refine(val => val === true, {\n    message: \"You must agree to receive communications\",\n  }),\n});\n\nexport const demoJobSchema = insertDemoJobSchema.extend({\n  modality: z.enum([\"xray\", \"ct\", \"mri\", \"pathology\"]),\n  studyId: z.string().min(1, \"Study ID is required\").max(100, \"Study ID too long\"),\n  enhancement: z.enum([\"super-resolution\", \"denoising\", \"harmonization\"]),\n  strength: z.number().min(0, \"Strength must be at least 0\").max(100, \"Strength cannot exceed 100\"),\n});\n","size_bytes":3819},"client/src/App.tsx":{"content":"import { Router, Route, Switch } from \"wouter\";\nimport Navbar from \"@/components/Navbar\";\nimport Footer from \"@/components/Footer\";\nimport Home from \"@/pages/Home\";\nimport Solutions from \"@/pages/Solutions\";\nimport Technology from \"@/pages/Technology\";\nimport Demos from \"@/pages/Demos\";\nimport Pricing from \"@/pages/Pricing\";\nimport Security from \"@/pages/Security\";\nimport About from \"@/pages/About\";\nimport Contact from \"@/pages/Contact\";\nimport Login from \"@/pages/Login\";\nimport NotFound from \"@/pages/not-found\";\nimport { useGlobalStore } from \"@/store/useGlobalStore\";\n\nfunction App() {\n  const { showDebugPanel } = useGlobalStore();\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <Navbar />\n      <main>\n        <Switch>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/solutions\" component={Solutions} />\n          <Route path=\"/technology\" component={Technology} />\n          <Route path=\"/demos\" component={Demos} />\n          <Route path=\"/pricing\" component={Pricing} />\n          <Route path=\"/security\" component={Security} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route path=\"/login\" component={Login} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n      <Footer />\n      \n      {/* Debug Panel */}\n      {showDebugPanel && (\n        <div className=\"fixed bottom-4 right-4 glass-card p-4 rounded-lg text-xs font-mono z-50\">\n          <div className=\"text-primary font-bold mb-2\">Debug Info</div>\n          <div>FPS: <span id=\"fps-counter\">60</span></div>\n          <div>GPU: <span>WebGL 2.0</span></div>\n          <div>SR Strength: <span>85%</span></div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","size_bytes":1801},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=DM+Sans:ital,opsz,wght@0,9..40,100..1000;1,9..40,100..1000&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Pure black theme with medical accents */\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(0, 0%, 91.18%);\n  --card: hsl(0, 0%, 9.41%);\n  --card-foreground: hsl(0, 0%, 85.1%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(0, 0%, 91.18%);\n  \n  /* Medical cyan primary */\n  --primary: hsl(187, 100%, 45%);\n  --primary-foreground: hsl(0, 0%, 0%);\n  \n  /* Medical violet secondary */\n  --secondary: hsl(262, 100%, 65%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  \n  --muted: hsl(0, 0%, 14.9%);\n  --muted-foreground: hsl(0, 0%, 63.92%);\n  --accent: hsl(0, 0%, 14.9%);\n  --accent-foreground: hsl(187, 100%, 45%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(0, 0%, 20%);\n  --input: hsl(0, 0%, 14.9%);\n  --ring: hsl(187, 100%, 45%);\n  \n  /* Medical theme colors */\n  --medical-cyan: hsl(187, 100%, 45%);\n  --medical-violet: hsl(262, 100%, 65%);\n  --zinc-800: hsl(0, 0%, 20%);\n  --zinc-900: hsl(0, 0%, 9%);\n  \n  /* Typography */\n  --font-inter: 'Inter', sans-serif;\n  --font-dm-sans: 'DM Sans', sans-serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  \n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(0, 0%, 91.18%);\n  --card: hsl(0, 0%, 9.41%);\n  --card-foreground: hsl(0, 0%, 85.1%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(0, 0%, 91.18%);\n  --primary: hsl(187, 100%, 45%);\n  --primary-foreground: hsl(0, 0%, 0%);\n  --secondary: hsl(262, 100%, 65%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(0, 0%, 14.9%);\n  --muted-foreground: hsl(0, 0%, 63.92%);\n  --accent: hsl(0, 0%, 14.9%);\n  --accent-foreground: hsl(187, 100%, 45%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(0, 0%, 20%);\n  --input: hsl(0, 0%, 14.9%);\n  --ring: hsl(187, 100%, 45%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  html {\n    scroll-behavior: smooth;\n  }\n  \n  body {\n    @apply bg-background text-foreground antialiased;\n    font-family: var(--font-inter);\n  }\n  \n  /* Reduced motion preferences */\n  @media (prefers-reduced-motion: reduce) {\n    html {\n      scroll-behavior: auto;\n    }\n    \n    .animate-gantry-rotate,\n    .animate-scan-beam,\n    .animate-float,\n    .animate-spin {\n      animation: none;\n    }\n  }\n}\n\n@layer components {\n  /* Glass morphism card */\n  .glass-card {\n    @apply bg-zinc-900/60 backdrop-blur-xl border border-zinc-800/50;\n  }\n  \n  /* Medical grid background */\n  .medical-grid {\n    background-image: \n      linear-gradient(rgba(0, 229, 255, 0.1) 1px, transparent 1px),\n      linear-gradient(90deg, rgba(0, 229, 255, 0.1) 1px, transparent 1px);\n    background-size: 20px 20px;\n  }\n  \n  /* Navigation blur effect */\n  .nav-blur {\n    @apply backdrop-blur-xl bg-black/80 border-b border-zinc-800;\n  }\n  \n  /* Focus styles for accessibility */\n  .focus-visible {\n    @apply focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 focus:ring-offset-background;\n  }\n  \n  /* Typography classes */\n  .font-inter {\n    font-family: var(--font-inter);\n  }\n  \n  .font-dm-sans {\n    font-family: var(--font-dm-sans);\n  }\n  \n  .font-mono-medical {\n    font-family: var(--font-mono);\n  }\n  \n  /* Compare slider styles */\n  .compare-container {\n    @apply relative w-full h-96 overflow-hidden rounded-xl;\n  }\n  \n  .compare-slider {\n    @apply absolute top-0 left-1/2 w-1 h-full bg-primary cursor-col-resize z-10;\n    box-shadow: 0 0 10px hsl(187, 100%, 45%);\n  }\n  \n  .compare-handle {\n    @apply absolute top-1/2 left-1/2 w-5 h-5 bg-primary rounded-full transform -translate-x-1/2 -translate-y-1/2;\n    box-shadow: 0 0 15px hsl(187, 100%, 45%);\n  }\n}\n\n@layer utilities {\n  /* 3D Gantry animations */\n  @keyframes gantryRotate {\n    0% { transform: rotateY(0deg) rotateX(15deg); }\n    100% { transform: rotateY(360deg) rotateX(15deg); }\n  }\n  \n  @keyframes scanBeam {\n    0%, 100% { \n      opacity: 0.3; \n      transform: scaleX(0.8); \n    }\n    50% { \n      opacity: 0.8; \n      transform: scaleX(1.2); \n    }\n  }\n  \n  @keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-20px); }\n  }\n  \n  @keyframes counter {\n    from { \n      opacity: 0; \n      transform: translateY(20px); \n    }\n    to { \n      opacity: 1; \n      transform: translateY(0); \n    }\n  }\n  \n  @keyframes pulse-glow {\n    0%, 100% {\n      box-shadow: 0 0 5px hsl(187, 100%, 45%), 0 0 10px hsl(187, 100%, 45%), 0 0 15px hsl(187, 100%, 45%);\n    }\n    50% {\n      box-shadow: 0 0 10px hsl(187, 100%, 45%), 0 0 20px hsl(187, 100%, 45%), 0 0 30px hsl(187, 100%, 45%);\n    }\n  }\n  \n  .animate-gantry-rotate {\n    animation: gantryRotate 20s linear infinite;\n  }\n  \n  .animate-scan-beam {\n    animation: scanBeam 3s ease-in-out infinite;\n  }\n  \n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n  \n  .animate-counter {\n    animation: counter 2s ease-out forwards;\n  }\n  \n  .animate-pulse-glow {\n    animation: pulse-glow 2s ease-in-out infinite;\n  }\n  \n  /* Medical gradient */\n  .bg-gradient-medical {\n    background: linear-gradient(135deg, hsl(187, 100%, 45%) 0%, hsl(262, 100%, 65%) 100%);\n  }\n  \n  /* Text gradient */\n  .text-gradient-medical {\n    background: linear-gradient(135deg, hsl(187, 100%, 45%) 0%, hsl(262, 100%, 65%) 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n  \n  /* Scanline effect */\n  .scanlines::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(\n      transparent 50%,\n      hsl(187, 100%, 45%, 0.03) 50%\n    );\n    background-size: 100% 4px;\n    pointer-events: none;\n  }\n}\n","size_bytes":5952},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <QueryClientProvider client={queryClient}>\n    <HelmetProvider>\n      <TooltipProvider>\n        <Toaster />\n        <App />\n      </TooltipProvider>\n    </HelmetProvider>\n  </QueryClientProvider>\n);\n","size_bytes":622},"client/src/site.config.ts":{"content":"export const siteConfig = {\n  name: \"Agnostic Imaging AI\",\n  description: \"OEM-Agnostic GenAI for Medical Imaging\",\n  tagline: \"Super-resolution and enhancement for X-Ray, CT, MRI, and Digital Pathology — as a Service\",\n  \n  // Brand colors\n  colors: {\n    primary: \"hsl(187, 100%, 45%)\", // Medical cyan\n    secondary: \"hsl(262, 100%, 65%)\", // Medical violet\n  },\n  \n  // Navigation\n  nav: [\n    { name: \"Home\", href: \"/\" },\n    { name: \"Solutions\", href: \"/solutions\" },\n    { name: \"Technology\", href: \"/technology\" },\n    { name: \"Demos\", href: \"/demos\" },\n    { name: \"Pricing\", href: \"/pricing\" },\n    { name: \"Security\", href: \"/security\" },\n    { name: \"About\", href: \"/about\" },\n    { name: \"Contact\", href: \"/contact\" },\n  ],\n  \n  // Contact information\n  contact: {\n    email: \"contact@agnosticimagingai.com\",\n    phone: \"+1 (555) 123-4567\",\n    address: {\n      street: \"123 Innovation Drive\",\n      city: \"Medical City\",\n      state: \"CA\",\n      zip: \"90210\",\n    },\n  },\n  \n  // Social links\n  social: {\n    linkedin: \"#\",\n    twitter: \"#\",\n    rss: \"#\",\n  },\n  \n  // Company info\n  company: {\n    foundedYear: 2024,\n    studiesEnhanced: 500000,\n    healthcareSystems: 50,\n  },\n  \n  // Features\n  features: {\n    xrayUpscaling: 4,\n    ctSliceThickness: 0.5,\n    mriVoxelSize: 0.5,\n  },\n};\n","size_bytes":1306},"client/src/components/Badge.tsx":{"content":"import { ReactNode } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface BadgeProps {\n  children: ReactNode;\n  variant?: \"default\" | \"primary\" | \"secondary\" | \"outline\";\n  size?: \"sm\" | \"md\" | \"lg\";\n  className?: string;\n}\n\nexport default function Badge({\n  children,\n  variant = \"default\",\n  size = \"md\",\n  className = \"\",\n}: BadgeProps) {\n  const variants = {\n    default: \"bg-zinc-800 text-zinc-300\",\n    primary: \"bg-primary text-primary-foreground\",\n    secondary: \"bg-secondary text-secondary-foreground\",\n    outline: \"border border-zinc-600 text-zinc-300\",\n  };\n\n  const sizes = {\n    sm: \"px-2 py-1 text-xs\",\n    md: \"px-3 py-1 text-sm\",\n    lg: \"px-4 py-2 text-base\",\n  };\n\n  return (\n    <span\n      className={cn(\n        \"inline-flex items-center rounded-full font-medium\",\n        variants[variant],\n        sizes[size],\n        className\n      )}\n      data-testid=\"badge\"\n    >\n      {children}\n    </span>\n  );\n}\n","size_bytes":937},"client/src/components/CTA.tsx":{"content":"import { ReactNode } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\ninterface CTAProps {\n  children: ReactNode;\n  href?: string;\n  variant?: \"primary\" | \"secondary\" | \"outline\";\n  size?: \"sm\" | \"md\" | \"lg\";\n  icon?: ReactNode;\n  iconPosition?: \"left\" | \"right\";\n  className?: string;\n  onClick?: () => void;\n  external?: boolean;\n}\n\nexport default function CTA({\n  children,\n  href,\n  variant = \"primary\",\n  size = \"md\",\n  icon,\n  iconPosition = \"right\",\n  className = \"\",\n  onClick,\n  external = false,\n}: CTAProps) {\n  const buttonContent = (\n    <>\n      {icon && iconPosition === \"left\" && <span className=\"mr-2\">{icon}</span>}\n      {children}\n      {icon && iconPosition === \"right\" && <span className=\"ml-2\">{icon}</span>}\n    </>\n  );\n\n  const buttonProps = {\n    variant: variant as any,\n    size: size as any,\n    className: cn(\"focus-visible transform hover:scale-105 transition-all\", className),\n    onClick,\n    \"data-testid\": \"cta-button\",\n  };\n\n  if (href) {\n    if (external || href.startsWith(\"http\")) {\n      return (\n        <a href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n          <Button {...buttonProps}>{buttonContent}</Button>\n        </a>\n      );\n    }\n\n    return (\n      <Link href={href}>\n        <Button {...buttonProps}>{buttonContent}</Button>\n      </Link>\n    );\n  }\n\n  return <Button {...buttonProps}>{buttonContent}</Button>;\n}\n","size_bytes":1457},"client/src/components/CompareSlider.tsx":{"content":"import { useState, useRef, useCallback } from \"react\";\nimport { useGlobalStore } from \"@/store/useGlobalStore\";\n\ninterface CompareSliderProps {\n  beforeSrc: string;\n  afterSrc: string;\n  beforeAlt: string;\n  afterAlt: string;\n  modality: string;\n  controls?: boolean;\n  className?: string;\n}\n\nexport default function CompareSlider({\n  beforeSrc,\n  afterSrc,\n  beforeAlt,\n  afterAlt,\n  modality,\n  controls = true,\n  className = \"\",\n}: CompareSliderProps) {\n  const [sliderPosition, setSliderPosition] = useState(50);\n  const [isDragging, setIsDragging] = useState(false);\n  const [windowLevel, setWindowLevel] = useState(50);\n  const [windowWidth, setWindowWidth] = useState(70);\n  const [isInverted, setIsInverted] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { srStrength, setSrStrength } = useGlobalStore();\n\n  const handleMouseDown = useCallback(() => {\n    setIsDragging(true);\n  }, []);\n\n  const handleMouseUp = useCallback(() => {\n    setIsDragging(false);\n  }, []);\n\n  const handleMouseMove = useCallback(\n    (e: React.MouseEvent | MouseEvent) => {\n      if (!isDragging || !containerRef.current) return;\n\n      const rect = containerRef.current.getBoundingClientRect();\n      const percentage = Math.max(0, Math.min(100, ((e.clientX - rect.left) / rect.width) * 100));\n      setSliderPosition(percentage);\n    },\n    [isDragging]\n  );\n\n  const handleTouchStart = useCallback(() => {\n    setIsDragging(true);\n  }, []);\n\n  const handleTouchEnd = useCallback(() => {\n    setIsDragging(false);\n  }, []);\n\n  const handleTouchMove = useCallback(\n    (e: React.TouchEvent) => {\n      if (!isDragging || !containerRef.current) return;\n\n      const rect = containerRef.current.getBoundingClientRect();\n      const touch = e.touches[0];\n      const percentage = Math.max(0, Math.min(100, ((touch.clientX - rect.left) / rect.width) * 100));\n      setSliderPosition(percentage);\n    },\n    [isDragging]\n  );\n\n  const reset = () => {\n    setSliderPosition(50);\n    setWindowLevel(50);\n    setWindowWidth(70);\n    setIsInverted(false);\n    setSrStrength(85);\n  };\n\n  return (\n    <div className={`w-full ${className}`} data-testid={`compare-slider-${modality.toLowerCase()}`}>\n      <div\n        ref={containerRef}\n        className=\"compare-container relative cursor-col-resize select-none\"\n        onMouseMove={handleMouseMove}\n        onMouseUp={handleMouseUp}\n        onMouseLeave={handleMouseUp}\n        onTouchMove={handleTouchMove}\n        onTouchEnd={handleTouchEnd}\n      >\n        {/* Before image */}\n        <img\n          src={beforeSrc}\n          alt={beforeAlt}\n          className={`absolute inset-0 w-full h-full object-cover select-none ${\n            isInverted ? \"filter invert\" : \"\"\n          }`}\n          draggable={false}\n          data-testid={`before-image-${modality.toLowerCase()}`}\n        />\n\n        {/* After image */}\n        <img\n          src={afterSrc}\n          alt={afterAlt}\n          className={`absolute inset-0 w-full h-full object-cover select-none ${\n            isInverted ? \"filter invert\" : \"\"\n          }`}\n          style={{ clipPath: `inset(0 0 0 ${sliderPosition}%)` }}\n          draggable={false}\n          data-testid={`after-image-${modality.toLowerCase()}`}\n        />\n\n        {/* Slider */}\n        <div\n          className=\"compare-slider\"\n          style={{ left: `${sliderPosition}%` }}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleTouchStart}\n          data-testid={`slider-handle-${modality.toLowerCase()}`}\n        >\n          <div className=\"compare-handle\" />\n        </div>\n\n        {/* Labels */}\n        <div className=\"absolute top-4 left-4 bg-black/60 backdrop-blur-sm px-3 py-1 rounded-lg text-white text-sm font-medium\">\n          Original\n        </div>\n        <div className=\"absolute top-4 right-4 bg-black/60 backdrop-blur-sm px-3 py-1 rounded-lg text-white text-sm font-medium\">\n          Enhanced\n        </div>\n      </div>\n\n      {/* Controls */}\n      {controls && (\n        <div className=\"mt-6\">\n          <div className=\"grid md:grid-cols-3 gap-6 mb-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-zinc-300 mb-2\">\n                Window Level\n              </label>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                value={windowLevel}\n                onChange={(e) => setWindowLevel(Number(e.target.value))}\n                className=\"w-full accent-primary focus-visible\"\n                data-testid=\"window-level-slider\"\n              />\n              <div className=\"text-xs text-zinc-400 font-mono mt-1\">\n                {windowLevel - 50} HU\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-zinc-300 mb-2\">\n                Window Width\n              </label>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                value={windowWidth}\n                onChange={(e) => setWindowWidth(Number(e.target.value))}\n                className=\"w-full accent-primary focus-visible\"\n                data-testid=\"window-width-slider\"\n              />\n              <div className=\"text-xs text-zinc-400 font-mono mt-1\">\n                {windowWidth * 20} HU\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-zinc-300 mb-2\">\n                SR Strength\n              </label>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                value={srStrength}\n                onChange={(e) => setSrStrength(Number(e.target.value))}\n                className=\"w-full accent-primary focus-visible\"\n                data-testid=\"sr-strength-slider\"\n              />\n              <div className=\"text-xs text-zinc-400 font-mono mt-1\">\n                {srStrength}%\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <button\n              onClick={reset}\n              className=\"px-4 py-2 bg-zinc-800 text-zinc-300 rounded-lg hover:bg-zinc-700 transition-colors focus-visible\"\n              data-testid=\"reset-button\"\n            >\n              <i className=\"fas fa-undo mr-2\"></i>Reset\n            </button>\n\n            <button\n              onClick={() => setIsInverted(!isInverted)}\n              className={`px-4 py-2 rounded-lg transition-colors focus-visible ${\n                isInverted\n                  ? \"bg-primary text-primary-foreground\"\n                  : \"bg-zinc-800 text-zinc-300 hover:bg-zinc-700\"\n              }`}\n              data-testid=\"invert-button\"\n            >\n              <i className=\"fas fa-adjust mr-2\"></i>\n              {isInverted ? \"Normal\" : \"Invert\"}\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":6946},"client/src/components/DicomViewer.tsx":{"content":"import { useState, useRef, useCallback } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function DicomViewer() {\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [pixelValue, setPixelValue] = useState(-150);\n  const [position, setPosition] = useState([256, 256]);\n  const [scale, setScale] = useState(\"0.5 mm/px\");\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const handleDragEnter = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragOver(true);\n  }, []);\n\n  const handleDragLeave = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragOver(false);\n  }, []);\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n  }, []);\n\n  const handleDrop = useCallback(\n    (e: React.DragEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setIsDragOver(false);\n\n      const files = Array.from(e.dataTransfer.files);\n      const dicomFiles = files.filter(\n        (file) =>\n          file.name.endsWith(\".dcm\") ||\n          file.name.endsWith(\".dicom\") ||\n          file.type === \"application/dicom\"\n      );\n\n      if (dicomFiles.length > 0) {\n        toast({\n          title: \"DICOM File Loaded\",\n          description: `Successfully loaded \"${dicomFiles[0].name}\". DICOM viewer would initialize here.`,\n        });\n        // TODO: Implement Cornerstone3D DICOM viewer initialization\n      } else {\n        toast({\n          title: \"Invalid File Type\",\n          description: \"Please upload DICOM (.dcm) files only.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    [toast]\n  );\n\n  const handleFileSelect = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const files = e.target.files;\n      if (files && files.length > 0) {\n        const file = files[0];\n        toast({\n          title: \"DICOM File Selected\",\n          description: `Selected \"${file.name}\". DICOM viewer would initialize here.`,\n        });\n        // TODO: Implement Cornerstone3D DICOM viewer initialization\n      }\n    },\n    [toast]\n  );\n\n  const handleBrowseFiles = () => {\n    fileInputRef.current?.click();\n  };\n\n  return (\n    <div className=\"w-full max-w-4xl mx-auto\" data-testid=\"dicom-viewer\">\n      {/* Drop Zone */}\n      <div\n        className={`border-2 border-dashed rounded-lg p-12 text-center mb-6 transition-colors ${\n          isDragOver\n            ? \"border-primary bg-primary/10\"\n            : \"border-zinc-600 hover:border-zinc-500\"\n        }`}\n        onDragEnter={handleDragEnter}\n        onDragLeave={handleDragLeave}\n        onDragOver={handleDragOver}\n        onDrop={handleDrop}\n        data-testid=\"dicom-drop-zone\"\n      >\n        <i className=\"fas fa-cloud-upload-alt text-4xl text-zinc-400 mb-4\"></i>\n        <p className=\"text-zinc-300 mb-2\">Drag and drop DICOM files here</p>\n        <p className=\"text-zinc-500 text-sm mb-4\">\n          Supports .dcm files and simple series\n        </p>\n        <Button\n          onClick={handleBrowseFiles}\n          className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n          data-testid=\"browse-files-button\"\n        >\n          Browse Files\n        </Button>\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          accept=\".dcm,.dicom,application/dicom\"\n          multiple\n          className=\"hidden\"\n          onChange={handleFileSelect}\n        />\n      </div>\n\n      {/* DICOM Viewer Controls */}\n      <div className=\"flex flex-wrap gap-4 justify-center mb-6\">\n        <Button\n          variant=\"outline\"\n          className=\"bg-zinc-800 text-zinc-300 border-zinc-600 hover:bg-zinc-700\"\n          data-testid=\"zoom-in-button\"\n        >\n          <i className=\"fas fa-search-plus mr-2\"></i>Zoom In\n        </Button>\n        <Button\n          variant=\"outline\"\n          className=\"bg-zinc-800 text-zinc-300 border-zinc-600 hover:bg-zinc-700\"\n          data-testid=\"zoom-out-button\"\n        >\n          <i className=\"fas fa-search-minus mr-2\"></i>Zoom Out\n        </Button>\n        <Button\n          variant=\"outline\"\n          className=\"bg-zinc-800 text-zinc-300 border-zinc-600 hover:bg-zinc-700\"\n          data-testid=\"pan-button\"\n        >\n          <i className=\"fas fa-hand-paper mr-2\"></i>Pan\n        </Button>\n        <Button\n          variant=\"outline\"\n          className=\"bg-zinc-800 text-zinc-300 border-zinc-600 hover:bg-zinc-700\"\n          data-testid=\"window-level-button\"\n        >\n          <i className=\"fas fa-adjust mr-2\"></i>W/L\n        </Button>\n        <Button\n          variant=\"outline\"\n          className=\"bg-zinc-800 text-zinc-300 border-zinc-600 hover:bg-zinc-700\"\n          data-testid=\"reset-viewport-button\"\n        >\n          <i className=\"fas fa-undo mr-2\"></i>Reset\n        </Button>\n        <Button\n          variant=\"outline\"\n          className=\"bg-zinc-800 text-zinc-300 border-zinc-600 hover:bg-zinc-700\"\n          data-testid=\"measure-button\"\n        >\n          <i className=\"fas fa-ruler mr-2\"></i>Measure\n        </Button>\n      </div>\n\n      {/* Pixel Readout */}\n      <div className=\"text-center text-zinc-400 font-mono text-sm\" data-testid=\"pixel-readout\">\n        Pixel Value: <span className=\"text-primary\">{pixelValue} HU</span> |{\" \"}\n        Position: <span className=\"text-primary\">{position.join(\", \")}</span> |{\" \"}\n        Scale: <span className=\"text-primary\">{scale}</span>\n      </div>\n\n      {/* DICOM Viewport (placeholder) */}\n      <div className=\"mt-6 h-96 bg-zinc-900 rounded-lg flex items-center justify-center border border-zinc-800\">\n        <div className=\"text-center text-zinc-500\">\n          <i className=\"fas fa-image text-6xl mb-4\"></i>\n          <p className=\"text-xl font-semibold mb-2\">DICOM Viewport</p>\n          <p className=\"text-sm\">Upload a DICOM file to view medical images</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6035},"client/src/components/FeatureCard.tsx":{"content":"import { ReactNode } from \"react\";\nimport { Link } from \"wouter\";\n\ninterface FeatureCardProps {\n  icon: ReactNode;\n  title: string;\n  description: string;\n  features: string[];\n  href?: string;\n  className?: string;\n}\n\nexport default function FeatureCard({\n  icon,\n  title,\n  description,\n  features,\n  href,\n  className = \"\",\n}: FeatureCardProps) {\n  const CardContent = () => (\n    <div className={`glass-card p-8 rounded-xl group hover:border-primary transition-all duration-300 ${className}`}>\n      <div className=\"flex items-center mb-6\">\n        <div className=\"w-12 h-12 bg-primary/20 rounded-lg flex items-center justify-center mr-4\">\n          {icon}\n        </div>\n        <h3 className=\"text-2xl font-dm-sans font-bold text-white\">{title}</h3>\n      </div>\n      \n      <p className=\"text-zinc-300 mb-6\">{description}</p>\n      \n      <ul className=\"space-y-3 text-zinc-300 mb-6\">\n        {features.map((feature, index) => (\n          <li key={index} className=\"flex items-start\">\n            <i className=\"fas fa-check text-primary mt-1 mr-3 text-sm\"></i>\n            {feature}\n          </li>\n        ))}\n      </ul>\n      \n      {href && (\n        <button className=\"text-primary hover:text-primary/80 font-semibold group-hover:translate-x-2 transition-all duration-300 focus-visible\">\n          Learn More <i className=\"fas fa-arrow-right ml-2\"></i>\n        </button>\n      )}\n    </div>\n  );\n\n  if (href && href.startsWith(\"/\")) {\n    return (\n      <Link href={href} data-testid={`feature-card-${title.toLowerCase().replace(/\\s+/g, \"-\")}`}>\n        <CardContent />\n      </Link>\n    );\n  }\n\n  if (href) {\n    return (\n      <a href={href} data-testid={`feature-card-${title.toLowerCase().replace(/\\s+/g, \"-\")}`}>\n        <CardContent />\n      </a>\n    );\n  }\n\n  return (\n    <div data-testid={`feature-card-${title.toLowerCase().replace(/\\s+/g, \"-\")}`}>\n      <CardContent />\n    </div>\n  );\n}\n","size_bytes":1912},"client/src/components/Footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { siteConfig } from \"@/site.config\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-zinc-900 border-t border-zinc-800\" data-testid=\"footer\">\n      <div className=\"container mx-auto px-6 py-16\">\n        <div className=\"grid md:grid-cols-4 gap-8 mb-12\">\n          {/* Brand */}\n          <div className=\"md:col-span-1\">\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"w-8 h-8 bg-gradient-medical rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-atom text-white text-sm\"></i>\n              </div>\n              <span className=\"text-xl font-dm-sans font-bold text-white\">\n                {siteConfig.name}\n              </span>\n            </div>\n            <p className=\"text-zinc-400 leading-relaxed\">\n              Transforming medical imaging through OEM-agnostic GenAI technology. \n              Upgrade your image quality without replacing your equipment.\n            </p>\n          </div>\n          \n          {/* Solutions */}\n          <div>\n            <h4 className=\"text-white font-semibold mb-6\">Solutions</h4>\n            <div className=\"space-y-3\">\n              <Link href=\"/solutions\" className=\"block text-zinc-400 hover:text-primary transition-colors\">\n                X-Ray Super-Resolution\n              </Link>\n              <Link href=\"/solutions\" className=\"block text-zinc-400 hover:text-primary transition-colors\">\n                CT Enhancement\n              </Link>\n              <Link href=\"/solutions\" className=\"block text-zinc-400 hover:text-primary transition-colors\">\n                MRI Super-Resolution\n              </Link>\n              <Link href=\"/solutions\" className=\"block text-zinc-400 hover:text-primary transition-colors\">\n                Digital Pathology\n              </Link>\n            </div>\n          </div>\n          \n          {/* Company */}\n          <div>\n            <h4 className=\"text-white font-semibold mb-6\">Company</h4>\n            <div className=\"space-y-3\">\n              <Link href=\"/about\" className=\"block text-zinc-400 hover:text-primary transition-colors\">\n                About Us\n              </Link>\n              <a href=\"#\" className=\"block text-zinc-400 hover:text-primary transition-colors\">\n                Careers\n              </a>\n              <a href=\"#\" className=\"block text-zinc-400 hover:text-primary transition-colors\">\n                News\n              </a>\n              <a href=\"#\" className=\"block text-zinc-400 hover:text-primary transition-colors\">\n                Partners\n              </a>\n            </div>\n          </div>\n          \n          {/* Support */}\n          <div>\n            <h4 className=\"text-white font-semibold mb-6\">Support</h4>\n            <div className=\"space-y-3\">\n              <a href=\"#\" className=\"block text-zinc-400 hover:text-primary transition-colors\">\n                Documentation\n              </a>\n              <a href=\"#\" className=\"block text-zinc-400 hover:text-primary transition-colors\">\n                API Reference\n              </a>\n              <a href=\"#\" className=\"block text-zinc-400 hover:text-primary transition-colors\">\n                Status Page\n              </a>\n              <Link to=\"/contact\" className=\"block text-zinc-400 hover:text-primary transition-colors\">\n                Contact Support\n              </Link>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-zinc-800 pt-8\">\n          <div className=\"flex flex-col md:flex-row items-center justify-between\">\n            <div className=\"text-zinc-400 text-sm mb-4 md:mb-0\">\n              © {siteConfig.company.foundedYear} {siteConfig.name}. All rights reserved.\n            </div>\n            <div className=\"flex space-x-6 text-sm\">\n              <a href=\"#\" className=\"text-zinc-400 hover:text-primary transition-colors\">\n                Privacy Policy\n              </a>\n              <a href=\"#\" className=\"text-zinc-400 hover:text-primary transition-colors\">\n                Terms of Service\n              </a>\n              <a href=\"#\" className=\"text-zinc-400 hover:text-primary transition-colors\">\n                Cookie Policy\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":4355},"client/src/components/Hero3D.tsx":{"content":"import { useRef, useMemo } from \"react\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport { OrbitControls, PerspectiveCamera, Bloom, EffectComposer } from \"@react-three/drei\";\nimport * as THREE from \"three\";\nimport Gantry from \"@/three/Gantry\";\n\nfunction Scene() {\n  return (\n    <>\n      <PerspectiveCamera makeDefault position={[0, 0, 5]} fov={60} />\n      <OrbitControls \n        enableZoom={false} \n        enablePan={false} \n        enableRotate={false}\n        autoRotate \n        autoRotateSpeed={0.5} \n      />\n      \n      {/* Lighting */}\n      <ambientLight intensity={0.2} />\n      <pointLight position={[10, 10, 10]} intensity={0.5} color=\"#00E5FF\" />\n      <pointLight position={[-10, -10, 10]} intensity={0.3} color=\"#7C4DFF\" />\n      <spotLight\n        position={[0, 10, 0]}\n        angle={0.3}\n        penumbra={1}\n        intensity={0.8}\n        color=\"#00E5FF\"\n        castShadow\n      />\n      \n      <Gantry />\n      \n      {/* Floating particles */}\n      <FloatingParticles />\n      \n      {/* Post-processing effects */}\n      <EffectComposer>\n        <Bloom luminanceThreshold={0.1} luminanceSmoothing={0.9} height={300} />\n      </EffectComposer>\n    </>\n  );\n}\n\nfunction FloatingParticles() {\n  const particlesRef = useRef<THREE.Group>(null);\n  \n  const particles = useMemo(() => {\n    const temp = [];\n    for (let i = 0; i < 50; i++) {\n      temp.push({\n        position: [\n          (Math.random() - 0.5) * 10,\n          (Math.random() - 0.5) * 10,\n          (Math.random() - 0.5) * 10,\n        ],\n        scale: Math.random() * 0.1 + 0.05,\n        color: Math.random() > 0.5 ? \"#00E5FF\" : \"#7C4DFF\",\n      });\n    }\n    return temp;\n  }, []);\n\n  useFrame((state) => {\n    if (particlesRef.current) {\n      particlesRef.current.rotation.y = state.clock.elapsedTime * 0.1;\n    }\n  });\n\n  return (\n    <group ref={particlesRef}>\n      {particles.map((particle, index) => (\n        <mesh key={index} position={particle.position as [number, number, number]}>\n          <sphereGeometry args={[particle.scale, 8, 8]} />\n          <meshBasicMaterial color={particle.color} transparent opacity={0.6} />\n        </mesh>\n      ))}\n    </group>\n  );\n}\n\nexport default function Hero3D() {\n  return (\n    <div className=\"w-full h-full relative\" data-testid=\"hero-3d\">\n      <Canvas\n        shadows\n        gl={{ antialias: true }}\n        className=\"w-full h-full\"\n      >\n        <Scene />\n      </Canvas>\n      \n      {/* Overlay scanlines effect */}\n      <div className=\"absolute inset-0 scanlines pointer-events-none opacity-30\" />\n    </div>\n  );\n}\n","size_bytes":2585},"client/src/components/Navbar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { siteConfig } from \"@/site.config\";\nimport { Menu, X } from \"lucide-react\";\n\nexport default function Navbar() {\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [location] = useLocation();\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 100);\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  const isActive = (path: string) => location === path;\n\n  return (\n    <nav \n      className={`fixed top-0 w-full z-50 transition-all duration-300 ${\n        isScrolled ? \"nav-blur\" : \"bg-black/80 backdrop-blur-xl border-b border-zinc-800/50\"\n      }`}\n      data-testid=\"navbar\"\n    >\n      <div className=\"container mx-auto px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center space-x-3 group\" data-testid=\"logo-link\">\n            <div className=\"w-8 h-8 bg-gradient-medical rounded-lg flex items-center justify-center group-hover:animate-pulse-glow transition-all\">\n              <i className=\"fas fa-atom text-white text-sm\"></i>\n            </div>\n            <span className=\"text-xl font-dm-sans font-bold text-white\">\n              {siteConfig.name}\n            </span>\n          </Link>\n          \n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-8\">\n            {siteConfig.nav.map((item) => (\n              <Link\n                key={item.name}\n                href={item.href}\n                className={`transition-colors focus-visible ${\n                  isActive(item.href) \n                    ? \"text-primary\" \n                    : \"text-zinc-300 hover:text-primary\"\n                }`}\n                data-testid={`nav-link-${item.name.toLowerCase()}`}\n              >\n                {item.name}\n              </Link>\n            ))}\n          </div>\n          \n          {/* CTA Buttons */}\n          <div className=\"hidden md:flex items-center space-x-4\">\n            <Link href=\"/login\">\n              <Button variant=\"ghost\" className=\"text-zinc-300 hover:text-white\" data-testid=\"login-button\">\n                Login\n              </Button>\n            </Link>\n            <Link href=\"/demos\">\n              <Button className=\"bg-primary text-primary-foreground hover:bg-primary/90\" data-testid=\"cta-demos\">\n                See Demos\n              </Button>\n            </Link>\n          </div>\n          \n          {/* Mobile Menu Button */}\n          <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>\n            <SheetTrigger asChild>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"md:hidden text-zinc-300 hover:text-white\"\n                data-testid=\"mobile-menu-button\"\n              >\n                {isMobileMenuOpen ? <X /> : <Menu />}\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"right\" className=\"w-80 glass-card border-l border-zinc-800\">\n              <div className=\"flex flex-col space-y-6 mt-8\">\n                {siteConfig.nav.map((item) => (\n                  <Link\n                    key={item.name}\n                    href={item.href}\n                    onClick={() => setIsMobileMenuOpen(false)}\n                    className={`text-left transition-colors ${\n                      isActive(item.href) \n                        ? \"text-primary\" \n                        : \"text-zinc-300 hover:text-primary\"\n                    }`}\n                    data-testid={`mobile-nav-link-${item.name.toLowerCase()}`}\n                  >\n                    {item.name}\n                  </Link>\n                ))}\n                <div className=\"pt-6 border-t border-zinc-800 space-y-4\">\n                  <Link href=\"/login\" onClick={() => setIsMobileMenuOpen(false)}>\n                    <Button variant=\"ghost\" className=\"w-full justify-start text-zinc-300 hover:text-white\">\n                      Login\n                    </Button>\n                  </Link>\n                  <Link href=\"/demos\" onClick={() => setIsMobileMenuOpen(false)}>\n                    <Button className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\">\n                      See Demos\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n            </SheetContent>\n          </Sheet>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":4811},"client/src/components/Section.tsx":{"content":"import { ReactNode } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface SectionProps {\n  id?: string;\n  title?: string;\n  subtitle?: string;\n  children: ReactNode;\n  className?: string;\n  background?: \"black\" | \"gradient\" | \"zinc\";\n}\n\nexport default function Section({\n  id,\n  title,\n  subtitle,\n  children,\n  className = \"\",\n  background = \"black\",\n}: SectionProps) {\n  const backgroundClasses = {\n    black: \"bg-black\",\n    gradient: \"bg-gradient-to-b from-black to-zinc-900\",\n    zinc: \"bg-zinc-900\",\n  };\n\n  return (\n    <section \n      id={id}\n      className={cn(\"py-20\", backgroundClasses[background], className)}\n      data-testid={id ? `section-${id}` : \"section\"}\n    >\n      <div className=\"container mx-auto px-6\">\n        {(title || subtitle) && (\n          <div className=\"text-center mb-16\">\n            {title && (\n              <h2 className=\"text-4xl md:text-5xl font-dm-sans font-bold text-white mb-6\">\n                {title}\n              </h2>\n            )}\n            {subtitle && (\n              <p className=\"text-xl text-zinc-300 max-w-3xl mx-auto\">\n                {subtitle}\n              </p>\n            )}\n          </div>\n        )}\n        {children}\n      </div>\n    </section>\n  );\n}\n","size_bytes":1229},"client/src/content/executive-summary.md":{"content":"# Generative Artificial Intelligence Models for Medical Imaging SaaS\n\n## Executive Summary\n\nMedical imaging (X-ray, CT, MRI, pathology) is essential to clinical diagnostics. Hardware advances rapidly, with pixel size improvements from ~500 µm to ~50 µm over ~25 years, creating pressure on centers with 10–15 year equipment lifecycles.\n\nOEM SaaS can help, but lock-in and varying quality remain challenges. **OEM-agnostic GenAI SaaS** offers a path to upgrade image quality without immediate capital expenditure.\n\n## Market Challenge\n\nHealthcare systems face immense pressure from rapidly advancing imaging technology. With equipment lifecycles spanning 10-15 years and imaging technology improving dramatically every few years, providers must choose between significant capital investments or accepting suboptimal image quality. Traditional OEM upgrade paths often lead to vendor lock-in and inconsistent quality standards.\n\n## Technology Solution\n\nOur GenAI-powered platform provides immediate image quality upgrades for existing equipment through advanced super-resolution and enhancement algorithms. By supporting all major OEM systems and maintaining vendor neutrality, we enable healthcare providers to optimize their imaging workflows while preserving their existing infrastructure investments.\n\n## Use Cases\n\n### X-Ray Super-Resolution\nTransform legacy computed radiography (~200 µm) to digital radiography equivalent quality (~50 µm) through AI enhancement. Preserve diagnostic fidelity while reducing hardware upgrade pressure through pay-per-use, OEM-agnostic implementation.\n\n### CT Super-Resolution & Enhancement\nLegacy 4/16-slice systems (~2–3 mm slice thickness) can achieve ~0.5 mm slice thickness and spatial resolution, with quality comparable to modern 256/320-slice systems. Scalable to 512/640-slice equivalent quality at a fraction of the capital expenditure through cloud or hybrid deployment.\n\n### MRI Super-Resolution & Enhancement\n1.5T fast scans (~5×5×5 mm voxel size) can be enhanced to ~0.5×0.5×0.5 mm 3T/5T/7T-like quality. Maintain SNR and anatomical integrity with physics-informed priors while achieving throughput gains through shorter scan times combined with post-acquisition enhancement.\n\n### Digital Re-Staining for WSI (Pathology)\nPredict alternative stain protocols digitally (cytology, histology, IHC) to reduce multi-stain costs and enable re-analysis of archived slides. Patient-centric approach ensures digital ownership and portability of pathology data.\n\n## Technical Approach\n\n### Generative AI Architecture\nDeep Neural Networks combined with adversarial learning for superior image enhancement and super-resolution capabilities. Transformer-based encoder-decoder networks with multi-scale feature extraction and attention mechanisms for detail preservation.\n\n### Physics-Informed Loss Functions\nRespects modality-specific constraints and physical principles to ensure clinically accurate results. Loss functions incorporate domain knowledge about imaging physics, noise characteristics, and anatomical structures.\n\n### OEM-Agnostic Training\nHarmonization algorithms ensure consistent performance across different imaging equipment manufacturers. Cross-vendor training datasets and domain adaptation techniques eliminate vendor-specific biases.\n\n### Quality Assurance Framework\nBuilt-in quality assurance with uncertainty quantification and automated QA overlay generation. Comprehensive validation frameworks ensure clinical reliability and radiologist confidence.\n\n## Market Impact\n\n- **Cost Reduction**: Eliminate immediate need for hardware upgrades\n- **Quality Improvement**: Achieve modern imaging quality on legacy systems\n- **Workflow Optimization**: Maintain existing PACS and workflow integrations\n- **Vendor Independence**: Break free from OEM lock-in constraints\n- **Patient Access**: Improve diagnostic capabilities without infrastructure barriers\n\n## Competitive Advantages\n\n1. **OEM Agnostic**: Works with any imaging system regardless of manufacturer\n2. **Physics-Informed**: Respects clinical and physical constraints\n3. **Pay-Per-Use**: Flexible pricing without large upfront investments\n4. **Cloud Native**: Scalable deployment options from cloud to on-premises\n5. **Clinically Validated**: Extensive validation with radiologist feedback\n\n## Implementation Strategy\n\n### Phase 1: X-Ray and CT Enhancement\nFocus on high-volume modalities with clear ROI metrics. Deploy pay-per-use model for immediate market entry.\n\n### Phase 2: MRI and Advanced Features\nExpand to MRI super-resolution and add advanced features like uncertainty mapping and automated quality assessment.\n\n### Phase 3: Enterprise and OEM Partnerships\nDevelop enterprise deployment options and establish OEM partnerships for integrated solutions.\n\n## Quality Metrics\n\n- **Spatial Resolution**: Up to 4× improvement in effective pixel size\n- **Slice Thickness**: Down to 0.5mm equivalent for CT\n- **Processing Time**: 30-60 seconds for X-ray, 2-8 minutes for CT/MRI\n- **Accuracy**: Maintains diagnostic fidelity with uncertainty quantification\n- **Compatibility**: 100% DICOM compliance with metadata preservation\n\n## Security and Compliance\n\n- **HIPAA Ready**: Comprehensive compliance framework with BAA availability\n- **SOC 2 Type II**: Security, availability, and confidentiality controls\n- **GDPR Compliant**: European data protection with data subject rights\n- **End-to-End Encryption**: AES-256 encryption in transit and at rest\n- **Zero Trust Architecture**: Advanced security controls and audit logging\n\n## Conclusion\n\nOEM-agnostic GenAI for medical imaging represents a paradigm shift from hardware-dependent quality improvements to software-driven enhancements. By democratizing access to advanced imaging capabilities, we enable healthcare providers to deliver superior patient care while optimizing their existing infrastructure investments.\n\nThe combination of cutting-edge AI technology, physics-informed processing, and vendor-neutral implementation creates unprecedented opportunities for healthcare systems to upgrade their imaging capabilities without the traditional barriers of cost, vendor lock-in, and infrastructure replacement.\n","size_bytes":6195},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/formatters.ts":{"content":"/**\n * Format numbers with appropriate units and precision\n */\nexport function formatNumber(value: number, options?: Intl.NumberFormatOptions): string {\n  return new Intl.NumberFormat('en-US', options).format(value);\n}\n\n/**\n * Format currency values\n */\nexport function formatCurrency(amount: number, currency = 'USD'): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency,\n  }).format(amount);\n}\n\n/**\n * Format large numbers with appropriate suffixes (K, M, B)\n */\nexport function formatLargeNumber(value: number): string {\n  if (value >= 1000000000) {\n    return (value / 1000000000).toFixed(1).replace('.0', '') + 'B';\n  }\n  if (value >= 1000000) {\n    return (value / 1000000).toFixed(1).replace('.0', '') + 'M';\n  }\n  if (value >= 1000) {\n    return (value / 1000).toFixed(1).replace('.0', '') + 'K';\n  }\n  return value.toString();\n}\n\n/**\n * Format percentages\n */\nexport function formatPercentage(value: number, decimals = 1): string {\n  return `${value.toFixed(decimals)}%`;\n}\n\n/**\n * Format medical imaging measurements\n */\nexport function formatResolution(value: number, unit = 'µm'): string {\n  if (value < 1 && unit === 'mm') {\n    return `${(value * 1000).toFixed(0)} µm`;\n  }\n  return `${value} ${unit}`;\n}\n\n/**\n * Format processing time\n */\nexport function formatProcessingTime(seconds: number): string {\n  if (seconds < 60) {\n    return `${seconds}s`;\n  }\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  \n  if (remainingSeconds === 0) {\n    return `${minutes}min`;\n  }\n  return `${minutes}min ${remainingSeconds}s`;\n}\n\n/**\n * Format file sizes\n */\nexport function formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\n}\n\n/**\n * Format DICOM metadata values\n */\nexport function formatDicomValue(value: any, vr?: string): string {\n  if (value == null) return 'N/A';\n  \n  switch (vr) {\n    case 'DA': // Date\n      if (typeof value === 'string' && value.length === 8) {\n        const year = value.substring(0, 4);\n        const month = value.substring(4, 6);\n        const day = value.substring(6, 8);\n        return `${month}/${day}/${year}`;\n      }\n      break;\n    case 'TM': // Time\n      if (typeof value === 'string' && value.length >= 6) {\n        const hour = value.substring(0, 2);\n        const minute = value.substring(2, 4);\n        const second = value.substring(4, 6);\n        return `${hour}:${minute}:${second}`;\n      }\n      break;\n    case 'DS': // Decimal String\n    case 'FL': // Floating Point Single\n    case 'FD': // Floating Point Double\n      if (typeof value === 'number') {\n        return value.toFixed(2);\n      }\n      break;\n    case 'IS': // Integer String\n    case 'SL': // Signed Long\n    case 'SS': // Signed Short\n    case 'UL': // Unsigned Long\n    case 'US': // Unsigned Short\n      if (typeof value === 'number') {\n        return value.toString();\n      }\n      break;\n  }\n  \n  return String(value);\n}\n\n/**\n * Format pixel spacing for display\n */\nexport function formatPixelSpacing(spacing: number[]): string {\n  if (!spacing || spacing.length === 0) return 'N/A';\n  \n  if (spacing.length === 1) {\n    return `${spacing[0].toFixed(2)} mm`;\n  }\n  \n  if (spacing.length === 2) {\n    if (spacing[0] === spacing[1]) {\n      return `${spacing[0].toFixed(2)} mm`;\n    }\n    return `${spacing[0].toFixed(2)} × ${spacing[1].toFixed(2)} mm`;\n  }\n  \n  return spacing.map(s => s.toFixed(2)).join(' × ') + ' mm';\n}\n\n/**\n * Format window/level values\n */\nexport function formatWindowLevel(window: number, level: number): string {\n  return `W: ${window.toFixed(0)} / L: ${level.toFixed(0)}`;\n}\n\n/**\n * Format Hounsfield Units\n */\nexport function formatHU(value: number): string {\n  return `${value.toFixed(0)} HU`;\n}\n\n/**\n * Format study/series counts\n */\nexport function formatStudyCount(count: number): string {\n  if (count === 1) return '1 study';\n  return `${formatLargeNumber(count)} studies`;\n}\n\nexport function formatSeriesCount(count: number): string {\n  if (count === 1) return '1 series';\n  return `${formatLargeNumber(count)} series`;\n}\n\n/**\n * Format relative time (e.g., \"2 hours ago\")\n */\nexport function formatRelativeTime(date: Date): string {\n  const now = new Date();\n  const diffMs = now.getTime() - date.getTime();\n  const diffSeconds = Math.floor(diffMs / 1000);\n  const diffMinutes = Math.floor(diffSeconds / 60);\n  const diffHours = Math.floor(diffMinutes / 60);\n  const diffDays = Math.floor(diffHours / 24);\n  \n  if (diffSeconds < 60) {\n    return 'just now';\n  } else if (diffMinutes < 60) {\n    return `${diffMinutes} minute${diffMinutes !== 1 ? 's' : ''} ago`;\n  } else if (diffHours < 24) {\n    return `${diffHours} hour${diffHours !== 1 ? 's' : ''} ago`;\n  } else if (diffDays < 7) {\n    return `${diffDays} day${diffDays !== 1 ? 's' : ''} ago`;\n  } else {\n    return date.toLocaleDateString();\n  }\n}\n","size_bytes":5074},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/seo.ts":{"content":"import { siteConfig } from \"@/site.config\";\n\nexport interface SEOConfig {\n  title?: string;\n  description?: string;\n  keywords?: string[];\n  canonicalUrl?: string;\n  ogTitle?: string;\n  ogDescription?: string;\n  ogImage?: string;\n  ogType?: string;\n  twitterCard?: string;\n  twitterSite?: string;\n  twitterCreator?: string;\n  jsonLd?: Record<string, any>;\n}\n\nexport function generateSEOTags(config: SEOConfig = {}) {\n  const {\n    title = siteConfig.name,\n    description = siteConfig.description,\n    keywords = [\n      \"medical imaging\",\n      \"AI enhancement\",\n      \"super-resolution\",\n      \"X-ray\",\n      \"CT\",\n      \"MRI\",\n      \"GenAI\",\n      \"OEM-agnostic\",\n      \"healthcare technology\",\n      \"radiology\",\n    ],\n    canonicalUrl,\n    ogTitle = title,\n    ogDescription = description,\n    ogImage = \"/social-preview.jpg\",\n    ogType = \"website\",\n    twitterCard = \"summary_large_image\",\n    twitterSite = \"@agnosticimagingai\",\n    twitterCreator = \"@agnosticimagingai\",\n    jsonLd,\n  } = config;\n\n  return {\n    title,\n    description,\n    keywords: keywords.join(\", \"),\n    canonicalUrl,\n    openGraph: {\n      title: ogTitle,\n      description: ogDescription,\n      image: ogImage,\n      type: ogType,\n      siteName: siteConfig.name,\n    },\n    twitter: {\n      card: twitterCard,\n      site: twitterSite,\n      creator: twitterCreator,\n      title: ogTitle,\n      description: ogDescription,\n      image: ogImage,\n    },\n    jsonLd,\n  };\n}\n\nexport function generateOrganizationJsonLd() {\n  return {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Organization\",\n    name: siteConfig.name,\n    description: siteConfig.description,\n    url: typeof window !== \"undefined\" ? window.location.origin : \"\",\n    logo: typeof window !== \"undefined\" ? `${window.location.origin}/logo.png` : \"\",\n    contactPoint: {\n      \"@type\": \"ContactPoint\",\n      telephone: siteConfig.contact.phone,\n      contactType: \"customer service\",\n      email: siteConfig.contact.email,\n    },\n    address: {\n      \"@type\": \"PostalAddress\",\n      streetAddress: siteConfig.contact.address.street,\n      addressLocality: siteConfig.contact.address.city,\n      addressRegion: siteConfig.contact.address.state,\n      postalCode: siteConfig.contact.address.zip,\n      addressCountry: \"US\",\n    },\n    sameAs: [\n      siteConfig.social.linkedin,\n      siteConfig.social.twitter,\n    ],\n    foundingDate: siteConfig.company.foundedYear.toString(),\n  };\n}\n\nexport function generateProductJsonLd() {\n  return {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"SoftwareApplication\",\n    name: siteConfig.name,\n    description: siteConfig.description,\n    applicationCategory: \"HealthApplication\",\n    operatingSystem: \"Web Browser\",\n    offers: {\n      \"@type\": \"Offer\",\n      priceCurrency: \"USD\",\n      price: \"12.00\",\n      priceValidUntil: \"2025-12-31\",\n      availability: \"https://schema.org/InStock\",\n      seller: {\n        \"@type\": \"Organization\",\n        name: siteConfig.name,\n      },\n    },\n    provider: {\n      \"@type\": \"Organization\",\n      name: siteConfig.name,\n    },\n    featureList: [\n      \"X-Ray Super-Resolution\",\n      \"CT Enhancement\",\n      \"MRI Super-Resolution\",\n      \"Digital Pathology\",\n      \"OEM-Agnostic Processing\",\n      \"HIPAA Compliance\",\n    ],\n  };\n}\n\nexport function generateBreadcrumbJsonLd(breadcrumbs: Array<{ name: string; url: string }>) {\n  return {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    itemListElement: breadcrumbs.map((crumb, index) => ({\n      \"@type\": \"ListItem\",\n      position: index + 1,\n      name: crumb.name,\n      item: crumb.url,\n    })),\n  };\n}\n\nexport function generateFAQJsonLd(faqs: Array<{ question: string; answer: string }>) {\n  return {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"FAQPage\",\n    mainEntity: faqs.map((faq) => ({\n      \"@type\": \"Question\",\n      name: faq.question,\n      acceptedAnswer: {\n        \"@type\": \"Answer\",\n        text: faq.answer,\n      },\n    })),\n  };\n}\n","size_bytes":3978},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/About.tsx":{"content":"import { Helmet } from \"react-helmet-async\";\nimport Section from \"@/components/Section\";\nimport Badge from \"@/components/Badge\";\nimport { siteConfig } from \"@/site.config\";\n\nexport default function About() {\n  const values = [\n    {\n      icon: \"fas fa-heart\",\n      title: \"Patient First\",\n      description: \"Every enhancement serves the ultimate goal of better patient outcomes\",\n    },\n    {\n      icon: \"fas fa-handshake\",\n      title: \"Vendor Neutrality\",\n      description: \"OEM-agnostic solutions that work with any imaging system\",\n    },\n    {\n      icon: \"fas fa-microscope\",\n      title: \"Scientific Rigor\",\n      description: \"Physics-informed AI that respects clinical requirements\",\n    },\n    {\n      icon: \"fas fa-users\",\n      title: \"Accessibility\",\n      description: \"Making advanced imaging technology accessible to all providers\",\n    },\n  ];\n\n  return (\n    <>\n      <Helmet>\n        <title>About Us - {siteConfig.name}</title>\n        <meta name=\"description\" content=\"Transforming healthcare through AI. Learn about our mission to make advanced imaging technology accessible to all healthcare providers.\" />\n      </Helmet>\n\n      <Section \n        title=\"Transforming Healthcare Through AI\"\n        subtitle=\"Founded on the principle that advanced imaging technology should be accessible to all healthcare providers, regardless of their equipment lifecycle or vendor relationships.\"\n        background=\"black\"\n        className=\"pt-32\"\n      >\n        <div className=\"grid lg:grid-cols-2 gap-16 items-center mb-16\">\n          {/* Mission Content */}\n          <div className=\"space-y-8\">\n            <div>\n              <h3 className=\"text-2xl font-dm-sans font-bold text-white mb-4\">Our Mission</h3>\n              <p className=\"text-zinc-300 leading-relaxed\">\n                We believe that every patient deserves access to the highest quality medical imaging, regardless of the \n                age or manufacturer of the imaging equipment. Our OEM-agnostic GenAI platform democratizes advanced \n                imaging capabilities, enabling healthcare providers to upgrade their diagnostic quality through software \n                rather than costly hardware replacements.\n              </p>\n            </div>\n            \n            <div>\n              <h3 className=\"text-2xl font-dm-sans font-bold text-white mb-4\">The Problem We Solve</h3>\n              <p className=\"text-zinc-300 leading-relaxed\">\n                Healthcare systems face immense pressure from rapidly advancing imaging technology. With equipment \n                lifecycles spanning 10-15 years and imaging technology improving dramatically every few years, \n                providers must choose between significant capital investments or accepting suboptimal image quality. \n                Traditional OEM upgrade paths often lead to vendor lock-in and inconsistent quality standards.\n              </p>\n            </div>\n            \n            <div>\n              <h3 className=\"text-2xl font-dm-sans font-bold text-white mb-4\">Our Solution</h3>\n              <p className=\"text-zinc-300 leading-relaxed\">\n                Our GenAI-powered platform provides immediate image quality upgrades for existing equipment through \n                advanced super-resolution and enhancement algorithms. By supporting all major OEM systems and \n                maintaining vendor neutrality, we enable healthcare providers to optimize their imaging workflows \n                while preserving their existing infrastructure investments.\n              </p>\n            </div>\n          </div>\n          \n          {/* Values */}\n          <div className=\"space-y-8\">\n            <div className=\"glass-card p-8 rounded-xl\">\n              <h3 className=\"text-xl font-dm-sans font-bold text-white mb-6\">Our Values</h3>\n              <div className=\"space-y-6\">\n                {values.map((value, index) => (\n                  <div key={index} className=\"flex items-start\">\n                    <div className=\"w-10 h-10 bg-primary/20 rounded-lg flex items-center justify-center mr-4 flex-shrink-0\">\n                      <i className={`${value.icon} text-primary`}></i>\n                    </div>\n                    <div>\n                      <div className=\"font-semibold text-white mb-1\">{value.title}</div>\n                      <div className=\"text-zinc-300 text-sm\">{value.description}</div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            <div className=\"glass-card p-8 rounded-xl text-center\">\n              <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"studies-enhanced-counter\">\n                {siteConfig.company.studiesEnhanced.toLocaleString()}+\n              </div>\n              <div className=\"text-zinc-300\">Studies Enhanced</div>\n              <div className=\"text-zinc-500 text-sm mt-1\">\n                Across {siteConfig.company.healthcareSystems}+ Healthcare Systems\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Founding Story */}\n        <div className=\"glass-card p-8 rounded-xl max-w-4xl mx-auto mb-16\">\n          <h3 className=\"text-2xl font-dm-sans font-bold text-white mb-6 text-center\">Founding Story</h3>\n          <p className=\"text-zinc-300 leading-relaxed text-center\">\n            Founded by a team of radiologists, AI researchers, and healthcare technology veterans who experienced \n            firsthand the frustration of working with aging imaging equipment while knowing that software-based \n            improvements were possible. After seeing countless cases where image quality limitations impacted \n            diagnostic confidence, we set out to create a solution that could upgrade any imaging system through \n            the power of artificial intelligence, without requiring hardware replacement or vendor lock-in.\n          </p>\n        </div>\n\n        {/* Team Stats */}\n        <div className=\"grid md:grid-cols-4 gap-8 max-w-4xl mx-auto\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-primary mb-2\">15+</div>\n            <div className=\"text-zinc-300\">Team Members</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-primary mb-2\">5+</div>\n            <div className=\"text-zinc-300\">Years Research</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-primary mb-2\">10+</div>\n            <div className=\"text-zinc-300\">Patents Pending</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-primary mb-2\">100%</div>\n            <div className=\"text-zinc-300\">OEM Agnostic</div>\n          </div>\n        </div>\n      </Section>\n    </>\n  );\n}\n","size_bytes":6883},"client/src/pages/Contact.tsx":{"content":"import { useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport Section from \"@/components/Section\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { siteConfig } from \"@/site.config\";\n\nconst contactSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  organization: z.string().optional(),\n  role: z.string().optional(),\n  interest: z.string().optional(),\n  message: z.string().optional(),\n  consent: z.boolean().refine(val => val === true, {\n    message: \"You must agree to receive communications\",\n  }),\n});\n\ntype ContactFormData = z.infer<typeof contactSchema>;\n\nexport default function Contact() {\n  const { toast } = useToast();\n  \n  const form = useForm<ContactFormData>({\n    resolver: zodResolver(contactSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      organization: \"\",\n      role: \"\",\n      interest: \"\",\n      message: \"\",\n      consent: false,\n    },\n  });\n\n  const submitMutation = useMutation({\n    mutationFn: async (data: ContactFormData) => {\n      return apiRequest(\"POST\", \"/api/contact\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message Sent Successfully\",\n        description: \"Thank you for your message! We'll be in touch soon.\",\n      });\n      form.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error Sending Message\",\n        description: error.message || \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ContactFormData) => {\n    submitMutation.mutate(data);\n  };\n\n  const roles = [\n    { value: \"radiologist\", label: \"Radiologist\" },\n    { value: \"it-director\", label: \"IT Director\" },\n    { value: \"administrator\", label: \"Administrator\" },\n    { value: \"researcher\", label: \"Researcher\" },\n    { value: \"other\", label: \"Other\" },\n  ];\n\n  const interests = [\n    { value: \"xray\", label: \"X-Ray Super-Resolution\" },\n    { value: \"ct\", label: \"CT Enhancement\" },\n    { value: \"mri\", label: \"MRI Super-Resolution\" },\n    { value: \"pathology\", label: \"Digital Pathology\" },\n    { value: \"integration\", label: \"PACS Integration\" },\n    { value: \"enterprise\", label: \"Enterprise Deployment\" },\n  ];\n\n  return (\n    <>\n      <Helmet>\n        <title>Contact Us - {siteConfig.name}</title>\n        <meta name=\"description\" content=\"Get in touch with our medical imaging AI experts. Schedule a demo or discuss your imaging enhancement needs.\" />\n      </Helmet>\n\n      <Section \n        title=\"Get in Touch\"\n        subtitle=\"Ready to transform your medical imaging capabilities? Contact us to learn more about our GenAI solutions.\"\n        background=\"gradient\"\n        className=\"pt-32\"\n      >\n        <div className=\"grid lg:grid-cols-2 gap-12 max-w-6xl mx-auto\">\n          {/* Contact Form */}\n          <div className=\"glass-card p-8 rounded-xl\">\n            <h3 className=\"text-xl font-dm-sans font-bold text-white mb-6\">Send us a message</h3>\n            \n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\" data-testid=\"contact-form\">\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-zinc-300\">First Name *</FormLabel>\n                        <FormControl>\n                          <Input \n                            {...field} \n                            className=\"bg-zinc-800 border-zinc-600 text-white focus:border-primary\"\n                            data-testid=\"input-first-name\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-zinc-300\">Last Name *</FormLabel>\n                        <FormControl>\n                          <Input \n                            {...field} \n                            className=\"bg-zinc-800 border-zinc-600 text-white focus:border-primary\"\n                            data-testid=\"input-last-name\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-zinc-300\">Email Address *</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          type=\"email\"\n                          className=\"bg-zinc-800 border-zinc-600 text-white focus:border-primary\"\n                          data-testid=\"input-email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"organization\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-zinc-300\">Organization</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          className=\"bg-zinc-800 border-zinc-600 text-white focus:border-primary\"\n                          data-testid=\"input-organization\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"role\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-zinc-300\">Role</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger className=\"bg-zinc-800 border-zinc-600 text-white\" data-testid=\"select-role\">\n                            <SelectValue placeholder=\"Select your role\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {roles.map((role) => (\n                            <SelectItem key={role.value} value={role.value}>\n                              {role.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"interest\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-zinc-300\">Area of Interest</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger className=\"bg-zinc-800 border-zinc-600 text-white\" data-testid=\"select-interest\">\n                            <SelectValue placeholder=\"Select an area\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {interests.map((interest) => (\n                            <SelectItem key={interest.value} value={interest.value}>\n                              {interest.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"message\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-zinc-300\">Message</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field} \n                          rows={4}\n                          placeholder=\"Tell us about your imaging needs and how we can help...\"\n                          className=\"bg-zinc-800 border-zinc-600 text-white focus:border-primary\"\n                          data-testid=\"textarea-message\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"consent\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                      <FormControl>\n                        <Checkbox\n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          className=\"accent-primary\"\n                          data-testid=\"checkbox-consent\"\n                        />\n                      </FormControl>\n                      <div className=\"space-y-1 leading-none\">\n                        <FormLabel className=\"text-sm text-zinc-300\">\n                          I agree to receive communications from {siteConfig.name} about our products and services *\n                        </FormLabel>\n                        <FormMessage />\n                      </div>\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\"\n                  disabled={submitMutation.isPending}\n                  data-testid=\"submit-contact-form\"\n                >\n                  {submitMutation.isPending ? (\n                    <>\n                      <i className=\"fas fa-spinner animate-spin mr-2\"></i>\n                      Sending...\n                    </>\n                  ) : (\n                    <>\n                      Send Message\n                      <i className=\"fas fa-paper-plane ml-2\"></i>\n                    </>\n                  )}\n                </Button>\n              </form>\n            </Form>\n          </div>\n          \n          {/* Contact Information */}\n          <div className=\"space-y-8\">\n            <div className=\"glass-card p-8 rounded-xl\">\n              <h3 className=\"text-xl font-dm-sans font-bold text-white mb-6\">Contact Information</h3>\n              \n              <div className=\"space-y-6\">\n                <div className=\"flex items-center\" data-testid=\"contact-email\">\n                  <div className=\"w-10 h-10 bg-primary/20 rounded-lg flex items-center justify-center mr-4\">\n                    <i className=\"fas fa-envelope text-primary\"></i>\n                  </div>\n                  <div>\n                    <div className=\"font-semibold text-white\">Email</div>\n                    <div className=\"text-zinc-300\">{siteConfig.contact.email}</div>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center\" data-testid=\"contact-phone\">\n                  <div className=\"w-10 h-10 bg-primary/20 rounded-lg flex items-center justify-center mr-4\">\n                    <i className=\"fas fa-phone text-primary\"></i>\n                  </div>\n                  <div>\n                    <div className=\"font-semibold text-white\">Phone</div>\n                    <div className=\"text-zinc-300\">{siteConfig.contact.phone}</div>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center\" data-testid=\"contact-address\">\n                  <div className=\"w-10 h-10 bg-primary/20 rounded-lg flex items-center justify-center mr-4\">\n                    <i className=\"fas fa-map-marker-alt text-primary\"></i>\n                  </div>\n                  <div>\n                    <div className=\"font-semibold text-white\">Address</div>\n                    <div className=\"text-zinc-300\">\n                      {siteConfig.contact.address.street}<br/>\n                      {siteConfig.contact.address.city}, {siteConfig.contact.address.state} {siteConfig.contact.address.zip}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"glass-card p-8 rounded-xl\">\n              <h3 className=\"text-xl font-dm-sans font-bold text-white mb-6\">Follow Us</h3>\n              \n              <div className=\"flex space-x-4\">\n                <a \n                  href={siteConfig.social.linkedin} \n                  className=\"w-10 h-10 bg-primary/20 rounded-lg flex items-center justify-center text-primary hover:bg-primary hover:text-primary-foreground transition-colors focus-visible\"\n                  data-testid=\"social-linkedin\"\n                >\n                  <i className=\"fab fa-linkedin\"></i>\n                </a>\n                <a \n                  href={siteConfig.social.twitter} \n                  className=\"w-10 h-10 bg-primary/20 rounded-lg flex items-center justify-center text-primary hover:bg-primary hover:text-primary-foreground transition-colors focus-visible\"\n                  data-testid=\"social-twitter\"\n                >\n                  <i className=\"fab fa-twitter\"></i>\n                </a>\n                <a \n                  href={siteConfig.social.rss} \n                  className=\"w-10 h-10 bg-primary/20 rounded-lg flex items-center justify-center text-primary hover:bg-primary hover:text-primary-foreground transition-colors focus-visible\"\n                  data-testid=\"social-rss\"\n                >\n                  <i className=\"fas fa-rss\"></i>\n                </a>\n              </div>\n            </div>\n            \n            <div className=\"glass-card p-8 rounded-xl\">\n              <h3 className=\"text-xl font-dm-sans font-bold text-white mb-4\">Schedule a Demo</h3>\n              <p className=\"text-zinc-300 mb-6\">\n                See our technology in action with a personalized demonstration using your imaging data.\n              </p>\n              <Button \n                asChild \n                variant=\"outline\" \n                className=\"border-primary text-primary hover:bg-primary hover:text-primary-foreground\"\n                data-testid=\"schedule-demo-button\"\n              >\n                <a href=\"/demos\">\n                  <i className=\"fas fa-calendar mr-2\"></i>\n                  Book Demo\n                </a>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </Section>\n    </>\n  );\n}\n","size_bytes":16123},"client/src/pages/Demos.tsx":{"content":"import { Helmet } from \"react-helmet-async\";\nimport Section from \"@/components/Section\";\nimport CompareSlider from \"@/components/CompareSlider\";\nimport DicomViewer from \"@/components/DicomViewer\";\nimport Badge from \"@/components/Badge\";\nimport { siteConfig } from \"@/site.config\";\n\nexport default function Demos() {\n  return (\n    <>\n      <Helmet>\n        <title>Interactive Demos - {siteConfig.name}</title>\n        <meta name=\"description\" content=\"Experience our GenAI technology with real-time chest X-ray, CT, and MRI enhancement demonstrations.\" />\n      </Helmet>\n\n      <Section \n        title=\"Interactive Demonstrations\"\n        subtitle=\"Experience our GenAI technology in action with real-time image enhancement comparisons.\"\n        background=\"gradient\"\n        className=\"pt-32\"\n      >\n        {/* Disclosure Banner */}\n        <div className=\"bg-yellow-500/10 border border-yellow-500/30 rounded-lg p-4 mb-16 max-w-4xl mx-auto\">\n          <p className=\"text-yellow-200 text-sm text-center\">\n            <i className=\"fas fa-info-circle mr-2\"></i>\n            Demo assets are synthetically generated or de-identified; results are illustrative of technology capabilities.\n          </p>\n        </div>\n\n        {/* X-Ray Comparison */}\n        <div className=\"mb-16\">\n          <h3 className=\"text-2xl font-dm-sans font-bold text-white mb-8 text-center\">\n            X-Ray Super-Resolution\n          </h3>\n          <div className=\"glass-card p-8 rounded-xl max-w-4xl mx-auto\">\n            <CompareSlider\n              beforeSrc=\"https://images.unsplash.com/photo-1559757148-5c350d0d3c56?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400&q=80\"\n              afterSrc=\"https://images.unsplash.com/photo-1576091160399-112ba8d25d1f?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400&q=80\"\n              beforeAlt=\"Original chest X-ray showing lung structures\"\n              afterAlt=\"Enhanced chest X-ray with super-resolution processing\"\n              modality=\"xray\"\n            />\n          </div>\n        </div>\n\n        {/* CT Comparison */}\n        <div className=\"mb-16\">\n          <h3 className=\"text-2xl font-dm-sans font-bold text-white mb-8 text-center\">\n            CT Super-Resolution\n          </h3>\n          <div className=\"glass-card p-8 rounded-xl max-w-4xl mx-auto\">\n            <CompareSlider\n              beforeSrc=\"https://images.unsplash.com/photo-1516549655169-df83a0774514?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400&q=80\"\n              afterSrc=\"https://images.unsplash.com/photo-1559757175-0eb30cd8c063?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400&q=80\"\n              beforeAlt=\"Original CT scan of thoracic cavity\"\n              afterAlt=\"Enhanced CT scan with improved resolution and clarity\"\n              modality=\"ct\"\n              controls={false}\n            />\n            <div className=\"text-center text-zinc-400 text-sm mt-4\">\n              Legacy 16-slice (2.5mm) → Enhanced 0.5mm equivalent slice thickness\n            </div>\n          </div>\n        </div>\n\n        {/* MRI Comparison */}\n        <div className=\"mb-16\">\n          <h3 className=\"text-2xl font-dm-sans font-bold text-white mb-8 text-center\">\n            MRI Super-Resolution\n          </h3>\n          <div className=\"glass-card p-8 rounded-xl max-w-4xl mx-auto\">\n            <CompareSlider\n              beforeSrc=\"https://images.unsplash.com/photo-1559757148-5c350d0d3c56?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400&q=80&sat=-100\"\n              afterSrc=\"https://images.unsplash.com/photo-1576091160399-112ba8d25d1f?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400&q=80&sat=-100\"\n              beforeAlt=\"Original 1.5T MRI scan with standard resolution\"\n              afterAlt=\"Enhanced MRI with 3T/7T-equivalent detail and resolution\"\n              modality=\"mri\"\n              controls={false}\n            />\n            <div className=\"text-center text-zinc-400 text-sm mt-4\">\n              1.5T Fast Scan (5×5×5 mm) → 3T/7T-equivalent (0.5×0.5×0.5 mm)\n            </div>\n          </div>\n        </div>\n\n        {/* DICOM Viewer */}\n        <div className=\"mb-16\">\n          <h3 className=\"text-2xl font-dm-sans font-bold text-white mb-8 text-center\">\n            DICOM Viewer\n          </h3>\n          <div className=\"glass-card p-8 rounded-xl\">\n            <DicomViewer />\n          </div>\n        </div>\n\n        {/* Performance Metrics */}\n        <div className=\"glass-card p-8 rounded-xl max-w-4xl mx-auto\">\n          <h3 className=\"text-2xl font-dm-sans font-bold text-white mb-6 text-center\">\n            Performance Metrics\n          </h3>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-primary mb-2\">30-60s</div>\n              <div className=\"text-zinc-300 font-semibold mb-1\">X-Ray Processing</div>\n              <div className=\"text-zinc-500 text-sm\">Typical enhancement time</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-primary mb-2\">2-5min</div>\n              <div className=\"text-zinc-300 font-semibold mb-1\">CT Processing</div>\n              <div className=\"text-zinc-500 text-sm\">Per volume enhancement</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-primary mb-2\">3-8min</div>\n              <div className=\"text-zinc-300 font-semibold mb-1\">MRI Processing</div>\n              <div className=\"text-zinc-500 text-sm\">Per sequence enhancement</div>\n            </div>\n          </div>\n        </div>\n      </Section>\n    </>\n  );\n}\n","size_bytes":5638},"client/src/pages/Home.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Link } from \"wouter\";\nimport Hero3D from \"@/components/Hero3D\";\nimport Section from \"@/components/Section\";\nimport FeatureCard from \"@/components/FeatureCard\";\nimport CTA from \"@/components/CTA\";\nimport Badge from \"@/components/Badge\";\nimport { siteConfig } from \"@/site.config\";\n\nexport default function Home() {\n  const [counters, setCounters] = useState({\n    upscaling: 0,\n    sliceThickness: 0,\n    voxelSize: 0,\n  });\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            animateCounters();\n            observer.disconnect();\n          }\n        });\n      },\n      { threshold: 0.3 }\n    );\n\n    const statsSection = document.getElementById(\"stats\");\n    if (statsSection) {\n      observer.observe(statsSection);\n    }\n\n    return () => observer.disconnect();\n  }, []);\n\n  const animateCounters = () => {\n    const duration = 2000;\n    const steps = 60;\n    const stepTime = duration / steps;\n\n    const targets = {\n      upscaling: siteConfig.features.xrayUpscaling,\n      sliceThickness: siteConfig.features.ctSliceThickness,\n      voxelSize: siteConfig.features.mriVoxelSize,\n    };\n\n    let currentStep = 0;\n\n    const timer = setInterval(() => {\n      currentStep++;\n      const progress = currentStep / steps;\n\n      setCounters({\n        upscaling: Math.round(targets.upscaling * progress),\n        sliceThickness: Number((targets.sliceThickness * progress).toFixed(1)),\n        voxelSize: Number((targets.voxelSize * progress).toFixed(1)),\n      });\n\n      if (currentStep >= steps) {\n        clearInterval(timer);\n        setCounters(targets);\n      }\n    }, stepTime);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>{siteConfig.name} - {siteConfig.tagline}</title>\n        <meta name=\"description\" content={siteConfig.description} />\n      </Helmet>\n\n      {/* Hero Section */}\n      <section className=\"min-h-screen flex items-center medical-grid pt-20\" data-testid=\"hero-section\">\n        <div className=\"container mx-auto px-6 py-20\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            {/* Hero Content */}\n            <div className=\"space-y-8\">\n              <div className=\"space-y-6\">\n                <h1 className=\"text-5xl md:text-7xl font-dm-sans font-bold text-white leading-tight\">\n                  OEM-Agnostic{\" \"}\n                  <span className=\"text-gradient-medical\">GenAI</span>{\" \"}\n                  for Medical Imaging\n                </h1>\n                <p className=\"text-xl text-zinc-300 leading-relaxed\">\n                  {siteConfig.tagline}\n                </p>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <CTA\n                  href=\"/demos\"\n                  variant=\"primary\"\n                  size=\"lg\"\n                  icon={<i className=\"fas fa-arrow-right\" />}\n                  data-testid=\"hero-demos-cta\"\n                >\n                  See Live Demos\n                </CTA>\n                <CTA\n                  href=\"/contact\"\n                  variant=\"outline\"\n                  size=\"lg\"\n                  data-testid=\"hero-contact-cta\"\n                >\n                  Talk to Us\n                </CTA>\n              </div>\n            </div>\n\n            {/* 3D Gantry Hero */}\n            <div className=\"flex items-center justify-center h-96\">\n              <Hero3D />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Strip */}\n      <Section id=\"stats\" background=\"black\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          <div className=\"glass-card p-6 rounded-xl text-center\">\n            <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"upscaling-counter\">\n              {counters.upscaling}×\n            </div>\n            <div className=\"text-zinc-400 font-mono text-sm\">\n              Up to {siteConfig.features.xrayUpscaling}× spatial upscaling (X-ray)\n            </div>\n          </div>\n          <div className=\"glass-card p-6 rounded-xl text-center\">\n            <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"slice-thickness-counter\">\n              {counters.sliceThickness}\n            </div>\n            <div className=\"text-zinc-400 font-mono text-sm\">\n              Down to {siteConfig.features.ctSliceThickness} mm slice equivalent (CT)\n            </div>\n          </div>\n          <div className=\"glass-card p-6 rounded-xl text-center\">\n            <div className=\"text-3xl font-bold text-primary mb-2\" data-testid=\"voxel-size-counter\">\n              {counters.voxelSize}\n            </div>\n            <div className=\"text-zinc-400 font-mono text-sm\">\n              {siteConfig.features.mriVoxelSize} mm³ voxel equivalence (MRI)\n            </div>\n          </div>\n        </div>\n      </Section>\n\n      {/* Trusted By Section */}\n      <Section background=\"black\">\n        <div className=\"text-center\">\n          <p className=\"text-zinc-400 mb-8\">Trusted by leading healthcare institutions</p>\n          <div className=\"flex justify-center items-center space-x-12 opacity-40\">\n            <div className=\"text-2xl font-bold text-zinc-500\">HOSPITAL A</div>\n            <div className=\"text-2xl font-bold text-zinc-500\">MEDICAL CENTER B</div>\n            <div className=\"text-2xl font-bold text-zinc-500\">CLINIC GROUP C</div>\n            <div className=\"text-2xl font-bold text-zinc-500\">RADIOLOGY D</div>\n          </div>\n          <div className=\"mt-8\">\n            <Badge variant=\"outline\" size=\"lg\">\n              <i className=\"fas fa-chart-line mr-2\"></i>\n              {siteConfig.company.studiesEnhanced.toLocaleString()}+ Studies Enhanced\n            </Badge>\n            <Badge variant=\"outline\" size=\"lg\" className=\"ml-4\">\n              <i className=\"fas fa-hospital mr-2\"></i>\n              {siteConfig.company.healthcareSystems}+ Healthcare Systems\n            </Badge>\n          </div>\n        </div>\n      </Section>\n\n      {/* Feature Highlights */}\n      <Section title=\"Revolutionary Solutions\" subtitle=\"Upgrade your imaging quality without hardware replacement\" background=\"gradient\">\n        <div className=\"grid md:grid-cols-2 gap-8\">\n          <FeatureCard\n            icon={<i className=\"fas fa-x-ray text-primary text-xl\"></i>}\n            title=\"X-Ray Super-Resolution\"\n            description=\"Transform legacy computed radiography to digital radiography equivalent quality through AI enhancement.\"\n            features={[\n              \"From ~200 µm CR → ~50 µm DR-equivalent\",\n              \"Preserve diagnostic fidelity\",\n              \"Pay-per-use; OEM-agnostic\"\n            ]}\n            href=\"/solutions\"\n          />\n          \n          <FeatureCard\n            icon={<i className=\"fas fa-microscope text-primary text-xl\"></i>}\n            title=\"CT & MRI Enhancement\"\n            description=\"Upgrade slice thickness and spatial resolution for legacy CT and MRI systems using physics-informed AI.\"\n            features={[\n              \"Legacy systems → Modern equivalent quality\",\n              \"Physics-informed processing\",\n              \"Cloud or hybrid deployment\"\n            ]}\n            href=\"/solutions\"\n          />\n        </div>\n        \n        <div className=\"text-center mt-12\">\n          <CTA\n            href=\"/solutions\"\n            variant=\"primary\"\n            size=\"lg\"\n            icon={<i className=\"fas fa-arrow-right\" />}\n            data-testid=\"solutions-cta\"\n          >\n            Explore All Solutions\n          </CTA>\n        </div>\n      </Section>\n\n      {/* CTA Section */}\n      <Section background=\"black\">\n        <div className=\"glass-card p-12 rounded-xl text-center max-w-4xl mx-auto\">\n          <h2 className=\"text-3xl md:text-4xl font-dm-sans font-bold text-white mb-6\">\n            Ready to Transform Your Medical Imaging?\n          </h2>\n          <p className=\"text-xl text-zinc-300 mb-8\">\n            Experience the power of OEM-agnostic GenAI technology with our interactive demonstrations\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <CTA\n              href=\"/demos\"\n              variant=\"primary\"\n              size=\"lg\"\n              icon={<i className=\"fas fa-play\" />}\n              data-testid=\"final-demos-cta\"\n            >\n              Try Interactive Demos\n            </CTA>\n            <CTA\n              href=\"/contact\"\n              variant=\"outline\"\n              size=\"lg\"\n              icon={<i className=\"fas fa-calendar\" />}\n              data-testid=\"final-contact-cta\"\n            >\n              Schedule Consultation\n            </CTA>\n          </div>\n        </div>\n      </Section>\n    </>\n  );\n}\n","size_bytes":8888},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { siteConfig } from \"@/site.config\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const { toast } = useToast();\n  \n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n    },\n  });\n\n  const onSubmit = (data: LoginFormData) => {\n    // Mock magic link sending\n    setIsSubmitted(true);\n    toast({\n      title: \"Magic Link Sent\",\n      description: `A magic link has been sent to ${data.email}. Please check your inbox.`,\n    });\n    \n    // In a real implementation, this would call an API to send the magic link\n    console.log(\"Sending magic link to:\", data.email);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Login - {siteConfig.name}</title>\n        <meta name=\"description\" content=\"Sign in to your Agnostic Imaging AI account to access enhanced medical imaging services.\" />\n      </Helmet>\n\n      <div className=\"min-h-screen flex items-center justify-center bg-black medical-grid pt-20\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-md mx-auto\">\n            <div className=\"glass-card p-8 rounded-xl\">\n              {/* Header */}\n              <div className=\"text-center mb-8\">\n                <div className=\"flex items-center justify-center mb-6\">\n                  <div className=\"w-12 h-12 bg-gradient-medical rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-atom text-white\"></i>\n                  </div>\n                </div>\n                <h1 className=\"text-2xl font-dm-sans font-bold text-white mb-2\">Welcome Back</h1>\n                <p className=\"text-zinc-400\">Sign in to your account</p>\n              </div>\n\n              {!isSubmitted ? (\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\" data-testid=\"login-form\">\n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-zinc-300\">Email Address</FormLabel>\n                          <FormControl>\n                            <Input \n                              {...field} \n                              type=\"email\"\n                              placeholder=\"Enter your email\"\n                              className=\"bg-zinc-800 border-zinc-600 text-white focus:border-primary\"\n                              data-testid=\"input-email\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\"\n                      data-testid=\"submit-login\"\n                    >\n                      Send Magic Link\n                      <i className=\"fas fa-paper-plane ml-2\"></i>\n                    </Button>\n                  </form>\n                </Form>\n              ) : (\n                <div className=\"text-center space-y-6\" data-testid=\"login-success\">\n                  <div className=\"w-16 h-16 bg-green-500/20 rounded-full flex items-center justify-center mx-auto\">\n                    <i className=\"fas fa-check text-green-400 text-2xl\"></i>\n                  </div>\n                  <div>\n                    <h3 className=\"text-xl font-semibold text-white mb-2\">Check Your Email</h3>\n                    <p className=\"text-zinc-300\">\n                      We've sent a magic link to your email address. Click the link to sign in securely.\n                    </p>\n                  </div>\n                  <Button \n                    onClick={() => {\n                      setIsSubmitted(false);\n                      form.reset();\n                    }}\n                    variant=\"outline\"\n                    className=\"w-full border-zinc-600 text-zinc-300 hover:bg-zinc-800\"\n                    data-testid=\"resend-link\"\n                  >\n                    Send Another Link\n                  </Button>\n                </div>\n              )}\n\n              {/* Footer */}\n              <div className=\"mt-8 pt-6 border-t border-zinc-800 text-center\">\n                <p className=\"text-zinc-400 text-sm\">\n                  Don't have an account?{\" \"}\n                  <Link href=\"/contact\" className=\"text-primary hover:text-primary/80 transition-colors\">\n                    Contact Sales\n                  </Link>\n                </p>\n                <p className=\"text-zinc-500 text-xs mt-2\">\n                  By signing in, you agree to our{\" \"}\n                  <a href=\"#\" className=\"text-primary hover:text-primary/80 transition-colors\">\n                    Terms of Service\n                  </a>{\" \"}\n                  and{\" \"}\n                  <a href=\"#\" className=\"text-primary hover:text-primary/80 transition-colors\">\n                    Privacy Policy\n                  </a>\n                </p>\n              </div>\n            </div>\n\n            {/* Back to Home */}\n            <div className=\"text-center mt-8\">\n              <Link \n                href=\"/\" \n                className=\"text-zinc-400 hover:text-primary transition-colors text-sm\"\n                data-testid=\"back-to-home\"\n              >\n                <i className=\"fas fa-arrow-left mr-2\"></i>\n                Back to Home\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":6300},"client/src/pages/Pricing.tsx":{"content":"import { useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Link } from \"wouter\";\nimport Section from \"@/components/Section\";\nimport { Button } from \"@/components/ui/button\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport Badge from \"@/components/Badge\";\nimport { siteConfig } from \"@/site.config\";\n\nexport default function Pricing() {\n  const [isAnnual, setIsAnnual] = useState(false);\n\n  const plans = [\n    {\n      name: \"Pay-Per-Use\",\n      price: 12,\n      period: \"per study\",\n      description: \"Perfect for small practices and pilot programs\",\n      features: [\n        \"All imaging modalities\",\n        \"Super-resolution enhancement\",\n        \"Basic API access\",\n        \"Email support\",\n        \"HIPAA compliance\",\n      ],\n      cta: \"Get Started\",\n      ctaVariant: \"outline\" as const,\n    },\n    {\n      name: \"Clinical\",\n      price: 8,\n      period: \"per study\",\n      description: \"Most popular for healthcare organizations\",\n      features: [\n        \"Everything in Pay-Per-Use\",\n        \"Volume discounts\",\n        \"SSO integration\",\n        \"Audit logs\",\n        \"Priority support\",\n        \"Custom DICOM routing\",\n      ],\n      cta: \"Start Trial\",\n      ctaVariant: \"primary\" as const,\n      popular: true,\n      note: \"with 1000+ studies/month\",\n    },\n    {\n      name: \"Enterprise/OEM\",\n      price: \"Custom\",\n      period: \"pricing\",\n      description: \"Tailored for large health systems and OEMs\",\n      features: [\n        \"Everything in Clinical\",\n        \"On-premises deployment\",\n        \"Hybrid cloud options\",\n        \"Custom SLAs\",\n        \"PHI segmentation\",\n        \"White-label options\",\n      ],\n      cta: \"Contact Sales\",\n      ctaVariant: \"outline\" as const,\n    },\n  ];\n\n  const faqs = [\n    {\n      question: \"What is the typical processing latency?\",\n      answer: \"Processing times vary by modality and image size. Typical ranges: X-Ray (30-60 seconds), CT (2-5 minutes), MRI (3-8 minutes). Enterprise deployments can achieve faster processing with dedicated resources.\",\n    },\n    {\n      question: \"How does PACS integration work?\",\n      answer: \"We support standard DICOM protocols and can integrate with major PACS systems including Epic, Cerner, GE Centricity, and Philips IntelliSpace. Our Edge Connector handles secure routing and maintains DICOM metadata integrity.\",\n    },\n    {\n      question: \"Which OEM systems are supported?\",\n      answer: \"Our OEM-agnostic approach supports imaging systems from all major manufacturers including GE Healthcare, Siemens Healthineers, Philips Healthcare, Canon Medical, Hologic, and legacy systems. Our harmonization algorithms ensure consistent quality across vendors.\",\n    },\n    {\n      question: \"What security certifications do you have?\",\n      answer: \"We maintain HIPAA readiness with BAA availability, SOC 2 Type II compliance posture, GDPR compliance for European operations, and comprehensive security controls including end-to-end encryption and access logging.\",\n    },\n  ];\n\n  return (\n    <>\n      <Helmet>\n        <title>Pricing - {siteConfig.name}</title>\n        <meta name=\"description\" content=\"Flexible pricing plans for medical imaging GenAI. Pay-per-use, clinical, and enterprise options available.\" />\n      </Helmet>\n\n      <Section \n        title=\"Flexible Pricing Plans\"\n        subtitle=\"Choose the plan that fits your healthcare organization's needs. Scale from per-study pricing to enterprise deployments.\"\n        background=\"black\"\n        className=\"pt-32\"\n      >\n        {/* Pricing Toggle */}\n        <div className=\"flex items-center justify-center mb-12\">\n          <div className=\"glass-card p-2 rounded-lg\">\n            <div className=\"flex items-center\">\n              <button\n                onClick={() => setIsAnnual(false)}\n                className={`px-4 py-2 rounded-lg transition-colors ${\n                  !isAnnual ? \"bg-primary text-primary-foreground\" : \"text-zinc-300\"\n                }`}\n              >\n                Monthly\n              </button>\n              <button\n                onClick={() => setIsAnnual(true)}\n                className={`px-4 py-2 rounded-lg transition-colors ${\n                  isAnnual ? \"bg-primary text-primary-foreground\" : \"text-zinc-300\"\n                }`}\n              >\n                Annual\n              </button>\n            </div>\n          </div>\n          {isAnnual && (\n            <Badge variant=\"primary\" className=\"ml-4\">\n              Save 20%\n            </Badge>\n          )}\n        </div>\n\n        {/* Pricing Cards */}\n        <div className=\"grid md:grid-cols-3 gap-8 max-w-6xl mx-auto mb-16\">\n          {plans.map((plan, index) => (\n            <div\n              key={index}\n              className={`glass-card p-8 rounded-xl relative ${\n                plan.popular ? \"border-primary\" : \"\"\n              }`}\n            >\n              {plan.popular && (\n                <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                  <Badge variant=\"primary\">Most Popular</Badge>\n                </div>\n              )}\n\n              <div className=\"text-center mb-8\">\n                <h3 className=\"text-2xl font-dm-sans font-bold text-white mb-4\">\n                  {plan.name}\n                </h3>\n                <div className=\"text-4xl font-bold text-primary mb-2\">\n                  ${plan.price}\n                </div>\n                <div className=\"text-zinc-400\">{plan.period}</div>\n                {plan.note && (\n                  <div className=\"text-sm text-zinc-500 mt-1\">{plan.note}</div>\n                )}\n                <p className=\"text-zinc-300 text-sm mt-4\">{plan.description}</p>\n              </div>\n\n              <ul className=\"space-y-4 mb-8\">\n                {plan.features.map((feature, idx) => (\n                  <li key={idx} className=\"flex items-center\">\n                    <i className=\"fas fa-check text-primary mr-3\"></i>\n                    <span className=\"text-zinc-300\">{feature}</span>\n                  </li>\n                ))}\n              </ul>\n\n              <Button\n                asChild\n                variant={plan.ctaVariant}\n                className=\"w-full\"\n                data-testid={`pricing-cta-${plan.name.toLowerCase().replace(/\\s+/g, \"-\")}`}\n              >\n                {plan.cta === \"Contact Sales\" ? (\n                  <Link href=\"/contact\">{plan.cta}</Link>\n                ) : (\n                  <Link href=\"/contact\">{plan.cta}</Link>\n                )}\n              </Button>\n            </div>\n          ))}\n        </div>\n\n        {/* FAQ */}\n        <div className=\"max-w-4xl mx-auto\">\n          <h3 className=\"text-2xl font-dm-sans font-bold text-white mb-8 text-center\">\n            Frequently Asked Questions\n          </h3>\n\n          <Accordion type=\"single\" collapsible className=\"space-y-4\">\n            {faqs.map((faq, index) => (\n              <AccordionItem \n                key={index} \n                value={`item-${index}`}\n                className=\"glass-card rounded-xl\"\n              >\n                <AccordionTrigger className=\"px-6 py-4 text-left font-semibold text-white hover:no-underline\">\n                  {faq.question}\n                </AccordionTrigger>\n                <AccordionContent className=\"px-6 pb-4 text-zinc-300\">\n                  {faq.answer}\n                </AccordionContent>\n              </AccordionItem>\n            ))}\n          </Accordion>\n        </div>\n\n        {/* Enterprise CTA */}\n        <div className=\"mt-16 glass-card p-12 rounded-xl text-center max-w-4xl mx-auto\">\n          <h3 className=\"text-2xl font-dm-sans font-bold text-white mb-4\">\n            Need Custom Enterprise Pricing?\n          </h3>\n          <p className=\"text-zinc-300 mb-8\">\n            Contact our sales team to discuss volume discounts, on-premises deployment, and white-label options.\n          </p>\n          <Button asChild size=\"lg\" className=\"bg-primary text-primary-foreground hover:bg-primary/90\">\n            <Link href=\"/contact\">\n              <i className=\"fas fa-phone mr-2\"></i>\n              Contact Enterprise Sales\n            </Link>\n          </Button>\n        </div>\n      </Section>\n    </>\n  );\n}\n","size_bytes":8277},"client/src/pages/Security.tsx":{"content":"import { Helmet } from \"react-helmet-async\";\nimport Section from \"@/components/Section\";\nimport Badge from \"@/components/Badge\";\nimport { siteConfig } from \"@/site.config\";\n\nexport default function Security() {\n  const certifications = [\n    {\n      icon: \"fas fa-shield-alt\",\n      title: \"HIPAA Ready\",\n      description: \"Comprehensive HIPAA compliance framework with BAA availability, audit trails, and administrative safeguards.\",\n    },\n    {\n      icon: \"fas fa-certificate\",\n      title: \"SOC 2 Ready\",\n      description: \"SOC 2 Type II compliance posture with security, availability, and confidentiality controls.\",\n    },\n    {\n      icon: \"fas fa-globe-europe\",\n      title: \"GDPR Compliant\",\n      description: \"European data protection compliance with data portability, right to erasure, and consent management.\",\n    },\n    {\n      icon: \"fas fa-lock\",\n      title: \"End-to-End Encryption\",\n      description: \"AES-256 encryption in transit and at rest. TLS 1.3 for all communications with perfect forward secrecy.\",\n    },\n    {\n      icon: \"fas fa-server\",\n      title: \"Data Residency\",\n      description: \"Configurable data residency options with regional processing centers in US, EU, and APAC regions.\",\n    },\n    {\n      icon: \"fas fa-key\",\n      title: \"Access Controls\",\n      description: \"Role-based access controls, multi-factor authentication, and comprehensive audit logging for all actions.\",\n    },\n  ];\n\n  return (\n    <>\n      <Helmet>\n        <title>Security & Compliance - {siteConfig.name}</title>\n        <meta name=\"description\" content=\"Enterprise security and compliance standards for medical imaging. HIPAA, SOC 2, and GDPR ready with end-to-end encryption.\" />\n      </Helmet>\n\n      <Section \n        title=\"Enterprise Security & Compliance\"\n        subtitle=\"Built with healthcare-grade security and compliance standards. Protect patient data while leveraging cutting-edge AI technology.\"\n        background=\"gradient\"\n        className=\"pt-32\"\n      >\n        {/* Disclaimer */}\n        <div className=\"bg-blue-500/10 border border-blue-500/30 rounded-lg p-4 mb-16 max-w-4xl mx-auto\">\n          <p className=\"text-blue-200 text-sm text-center\">\n            <i className=\"fas fa-info-circle mr-2\"></i>\n            Security and compliance information shown for demonstration purposes only. Actual implementations require formal security assessments.\n          </p>\n        </div>\n\n        {/* Security Features Grid */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16\">\n          {certifications.map((cert, index) => (\n            <div key={index} className=\"glass-card p-8 rounded-xl text-center\">\n              <div className=\"w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <i className={`${cert.icon} text-primary text-2xl`}></i>\n              </div>\n              <h3 className=\"text-xl font-dm-sans font-bold text-white mb-4\">\n                {cert.title}\n              </h3>\n              <p className=\"text-zinc-300\">{cert.description}</p>\n            </div>\n          ))}\n        </div>\n\n        {/* Additional Security Features */}\n        <div className=\"glass-card p-8 rounded-xl max-w-4xl mx-auto mb-16\">\n          <h3 className=\"text-2xl font-dm-sans font-bold text-white mb-6 text-center\">\n            Additional Security Features\n          </h3>\n\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            <div>\n              <h4 className=\"text-lg font-semibold text-primary mb-4\">Infrastructure Security</h4>\n              <ul className=\"space-y-2 text-zinc-300\">\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-primary mr-3 text-sm\"></i>\n                  Zero-trust network architecture\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-primary mr-3 text-sm\"></i>\n                  Automated vulnerability scanning\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-primary mr-3 text-sm\"></i>\n                  24/7 security monitoring\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-primary mr-3 text-sm\"></i>\n                  Incident response procedures\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-primary mr-3 text-sm\"></i>\n                  Regular penetration testing\n                </li>\n              </ul>\n            </div>\n\n            <div>\n              <h4 className=\"text-lg font-semibold text-primary mb-4\">Data Protection</h4>\n              <ul className=\"space-y-2 text-zinc-300\">\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-primary mr-3 text-sm\"></i>\n                  Automated data anonymization\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-primary mr-3 text-sm\"></i>\n                  Secure multi-tenant isolation\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-primary mr-3 text-sm\"></i>\n                  Data encryption at rest and in transit\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-primary mr-3 text-sm\"></i>\n                  Business Associate Agreement (BAA)\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-primary mr-3 text-sm\"></i>\n                  Comprehensive audit trails\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n\n        {/* Compliance Standards */}\n        <div className=\"grid md:grid-cols-3 gap-8 max-w-4xl mx-auto\">\n          <div className=\"glass-card p-6 rounded-xl text-center\">\n            <Badge variant=\"primary\" size=\"lg\" className=\"mb-4\">\n              HIPAA\n            </Badge>\n            <h4 className=\"text-lg font-semibold text-white mb-2\">\n              Health Insurance Portability and Accountability Act\n            </h4>\n            <p className=\"text-zinc-400 text-sm\">\n              US healthcare data protection standards with administrative, physical, and technical safeguards.\n            </p>\n          </div>\n\n          <div className=\"glass-card p-6 rounded-xl text-center\">\n            <Badge variant=\"primary\" size=\"lg\" className=\"mb-4\">\n              SOC 2\n            </Badge>\n            <h4 className=\"text-lg font-semibold text-white mb-2\">\n              Service Organization Control 2\n            </h4>\n            <p className=\"text-zinc-400 text-sm\">\n              Independent audit of security, availability, processing integrity, confidentiality, and privacy controls.\n            </p>\n          </div>\n\n          <div className=\"glass-card p-6 rounded-xl text-center\">\n            <Badge variant=\"primary\" size=\"lg\" className=\"mb-4\">\n              GDPR\n            </Badge>\n            <h4 className=\"text-lg font-semibold text-white mb-2\">\n              General Data Protection Regulation\n            </h4>\n            <p className=\"text-zinc-400 text-sm\">\n              European Union data protection and privacy regulation with data subject rights and consent management.\n            </p>\n          </div>\n        </div>\n      </Section>\n    </>\n  );\n}\n","size_bytes":7557},"client/src/pages/Solutions.tsx":{"content":"import { Helmet } from \"react-helmet-async\";\nimport Section from \"@/components/Section\";\nimport FeatureCard from \"@/components/FeatureCard\";\nimport { siteConfig } from \"@/site.config\";\nimport solutions from \"@/content/solutions.json\";\n\nexport default function Solutions() {\n  return (\n    <>\n      <Helmet>\n        <title>Solutions - {siteConfig.name}</title>\n        <meta name=\"description\" content=\"Advanced medical imaging solutions for X-Ray, CT, MRI, and Digital Pathology. OEM-agnostic GenAI technology for healthcare providers.\" />\n      </Helmet>\n\n      {/* Hero */}\n      <Section \n        title=\"Advanced Solutions for Every Modality\"\n        subtitle=\"Transform legacy imaging systems with cutting-edge GenAI technology. Upgrade image quality without hardware replacement.\"\n        background=\"gradient\"\n        className=\"pt-32\"\n      >\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-2 gap-8 mb-12\">\n          {solutions.map((solution, index) => (\n            <FeatureCard\n              key={index}\n              icon={<i className={`${solution.icon} text-primary text-xl`}></i>}\n              title={solution.title}\n              description={solution.description}\n              features={solution.features}\n              href=\"/demos\"\n            />\n          ))}\n        </div>\n\n        {/* Executive Context */}\n        <div className=\"glass-card p-8 rounded-xl\">\n          <h3 className=\"text-2xl font-dm-sans font-bold text-white mb-4\">Executive Context</h3>\n          <p className=\"text-zinc-300 leading-relaxed\">\n            Medical imaging hardware advances rapidly, creating pressure on healthcare centers with 10–15 year equipment lifecycles. \n            Traditional OEM SaaS solutions present challenges including vendor lock-in and varying quality standards. Our OEM-agnostic \n            GenAI SaaS platform offers a transformative path to upgrade image quality without immediate capital expenditure, \n            enabling healthcare providers to deliver superior diagnostic capabilities while maximizing their existing infrastructure investments.\n          </p>\n        </div>\n      </Section>\n    </>\n  );\n}\n","size_bytes":2150},"client/src/pages/Technology.tsx":{"content":"import { useState } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport Section from \"@/components/Section\";\nimport { siteConfig } from \"@/site.config\";\n\nexport default function Technology() {\n  const [activeTab, setActiveTab] = useState(\"pipeline\");\n\n  const technologies = [\n    {\n      icon: \"fas fa-robot\",\n      title: \"Generative AI\",\n      description: \"Deep Neural Networks combined with adversarial learning for superior image enhancement and super-resolution capabilities.\",\n    },\n    {\n      icon: \"fas fa-atom\",\n      title: \"Physics-Informed Loss\",\n      description: \"Respects modality-specific constraints and physical principles to ensure clinically accurate results.\",\n    },\n    {\n      icon: \"fas fa-network-wired\",\n      title: \"OEM-Agnostic Training\",\n      description: \"Harmonization algorithms ensure consistent performance across different imaging equipment manufacturers.\",\n    },\n    {\n      icon: \"fas fa-shield-alt\",\n      title: \"Uncertainty Maps & QA\",\n      description: \"Built-in quality assurance with uncertainty quantification and automated QA overlay generation.\",\n    },\n  ];\n\n  const pipelineSteps = [\n    { icon: \"fas fa-upload\", title: \"Input\", description: \"DICOM/Raw Image\" },\n    { icon: \"fas fa-filter\", title: \"Denoise\", description: \"Noise Reduction\" },\n    { icon: \"fas fa-eye\", title: \"Deblur\", description: \"Sharpness Enhancement\" },\n    { icon: \"fas fa-expand-arrows-alt\", title: \"Super-Resolution\", description: \"Resolution Enhancement\" },\n    { icon: \"fas fa-balance-scale\", title: \"Harmonize\", description: \"Cross-OEM Standardization\" },\n    { icon: \"fas fa-check\", title: \"Enhanced Output\", description: \"Clinical-Ready Image\" },\n  ];\n\n  return (\n    <>\n      <Helmet>\n        <title>Technology - {siteConfig.name}</title>\n        <meta name=\"description\" content=\"Cutting-edge GenAI technology for medical imaging. Physics-informed neural networks with OEM-agnostic training.\" />\n      </Helmet>\n\n      <Section \n        title=\"Cutting-Edge Technology Stack\"\n        subtitle=\"Our approach combines deep neural networks with physics-informed constraints to deliver clinically validated results.\"\n        background=\"black\"\n        className=\"pt-32\"\n      >\n        <div className=\"grid md:grid-cols-2 gap-12 items-center mb-16\">\n          {/* Technology Approach */}\n          <div className=\"space-y-8\">\n            {technologies.map((tech, index) => (\n              <div key={index} className=\"glass-card p-6 rounded-xl\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"w-10 h-10 bg-primary/20 rounded-lg flex items-center justify-center mr-4\">\n                    <i className={`${tech.icon} text-primary`}></i>\n                  </div>\n                  <h3 className=\"text-xl font-dm-sans font-bold text-white\">{tech.title}</h3>\n                </div>\n                <p className=\"text-zinc-300\">{tech.description}</p>\n              </div>\n            ))}\n          </div>\n\n          {/* Pipeline Diagram */}\n          <div className=\"glass-card p-8 rounded-xl\">\n            <h3 className=\"text-xl font-dm-sans font-bold text-white mb-6 text-center\">Processing Pipeline</h3>\n            <div className=\"flex flex-col space-y-4\">\n              {pipelineSteps.map((step, index) => (\n                <div key={index}>\n                  <div className=\"flex items-center\">\n                    <div className={`w-12 h-12 rounded-lg flex items-center justify-center mr-4 ${\n                      index === pipelineSteps.length - 1 ? \"bg-primary/20\" : \"bg-zinc-800\"\n                    }`}>\n                      <i className={`${step.icon} ${\n                        index === pipelineSteps.length - 1 ? \"text-primary\" : \"text-primary\"\n                      }`}></i>\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"font-semibold text-white\">{step.title}</div>\n                      <div className=\"text-sm text-zinc-400 font-mono\">{step.description}</div>\n                    </div>\n                  </div>\n                  {index < pipelineSteps.length - 1 && (\n                    <div className=\"flex items-center justify-center mt-2 mb-2\">\n                      <i className=\"fas fa-arrow-down text-primary\"></i>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Technical Details */}\n        <div className=\"glass-card p-8 rounded-xl\">\n          <h3 className=\"text-2xl font-dm-sans font-bold text-white mb-6\">Technical Implementation</h3>\n          \n          <div className=\"grid md:grid-cols-2 gap-8\">\n            <div>\n              <h4 className=\"text-lg font-semibold text-primary mb-4\">AI Architecture</h4>\n              <ul className=\"space-y-2 text-zinc-300\">\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-primary mr-3 text-sm\"></i>\n                  Transformer-based encoder-decoder networks\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-primary mr-3 text-sm\"></i>\n                  Generative adversarial network training\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-primary mr-3 text-sm\"></i>\n                  Multi-scale feature extraction\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-primary mr-3 text-sm\"></i>\n                  Attention mechanisms for detail preservation\n                </li>\n              </ul>\n            </div>\n\n            <div>\n              <h4 className=\"text-lg font-semibold text-primary mb-4\">Quality Assurance</h4>\n              <ul className=\"space-y-2 text-zinc-300\">\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-primary mr-3 text-sm\"></i>\n                  Automated quality metrics computation\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-primary mr-3 text-sm\"></i>\n                  Uncertainty quantification maps\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-primary mr-3 text-sm\"></i>\n                  Clinical validation frameworks\n                </li>\n                <li className=\"flex items-center\">\n                  <i className=\"fas fa-check text-primary mr-3 text-sm\"></i>\n                  Radiologist feedback integration\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </Section>\n    </>\n  );\n}\n","size_bytes":6801},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/store/useGlobalStore.ts":{"content":"import { create } from \"zustand\";\n\ninterface GlobalState {\n  // Theme state\n  accentColor: \"cyan\" | \"violet\";\n  setAccentColor: (color: \"cyan\" | \"violet\") => void;\n  \n  // Demo state\n  srStrength: number;\n  setSrStrength: (strength: number) => void;\n  \n  // Debug state\n  showDebugPanel: boolean;\n  setShowDebugPanel: (show: boolean) => void;\n  \n  // Navigation state\n  activeSection: string;\n  setActiveSection: (section: string) => void;\n}\n\nexport const useGlobalStore = create<GlobalState>((set) => ({\n  // Theme\n  accentColor: \"cyan\",\n  setAccentColor: (color) => set({ accentColor: color }),\n  \n  // Demo\n  srStrength: 85,\n  setSrStrength: (strength) => set({ srStrength: strength }),\n  \n  // Debug\n  showDebugPanel: typeof window !== \"undefined\" && window.location.search.includes(\"debug=1\"),\n  setShowDebugPanel: (show) => set({ showDebugPanel: show }),\n  \n  // Navigation\n  activeSection: \"home\",\n  setActiveSection: (section) => set({ activeSection: section }),\n}));\n","size_bytes":976},"client/src/three/Gantry.tsx":{"content":"import { useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { Cylinder, Torus } from \"@react-three/drei\";\nimport * as THREE from \"three\";\n\nexport default function Gantry() {\n  const gantryRef = useRef<THREE.Group>(null);\n  const scanBeamRef = useRef<THREE.Group>(null);\n  \n  useFrame((state) => {\n    if (gantryRef.current) {\n      gantryRef.current.rotation.y = state.clock.elapsedTime * 0.3;\n      gantryRef.current.rotation.x = Math.PI / 12; // 15-degree tilt\n    }\n    \n    if (scanBeamRef.current) {\n      const time = state.clock.elapsedTime;\n      scanBeamRef.current.rotation.z = time * 2;\n      \n      // Pulsing effect for scan beams\n      const opacity = 0.3 + Math.sin(time * 3) * 0.5;\n      scanBeamRef.current.children.forEach((child) => {\n        if (child instanceof THREE.Mesh && child.material instanceof THREE.Material) {\n          (child.material as any).opacity = Math.max(0.1, opacity);\n        }\n      });\n    }\n  });\n\n  return (\n    <group ref={gantryRef} data-testid=\"gantry-group\">\n      {/* Outer gantry ring */}\n      <Torus args={[2.5, 0.05, 16, 100]} rotation={[Math.PI / 2, 0, 0]}>\n        <meshStandardMaterial \n          color=\"#00E5FF\" \n          emissive=\"#00E5FF\" \n          emissiveIntensity={0.2}\n          metalness={0.8}\n          roughness={0.2}\n          transparent\n          opacity={0.8}\n        />\n      </Torus>\n      \n      {/* Inner gantry ring */}\n      <Torus args={[1.8, 0.03, 16, 100]} rotation={[Math.PI / 2, 0, 0]}>\n        <meshStandardMaterial \n          color=\"#7C4DFF\" \n          emissive=\"#7C4DFF\" \n          emissiveIntensity={0.3}\n          metalness={0.9}\n          roughness={0.1}\n          transparent\n          opacity={0.6}\n        />\n      </Torus>\n      \n      {/* Support structures */}\n      <group>\n        {[0, Math.PI / 2, Math.PI, (3 * Math.PI) / 2].map((angle, index) => (\n          <group key={index} rotation={[0, 0, angle]}>\n            <Cylinder args={[0.02, 0.02, 1.4]} position={[2.15, 0, 0]} rotation={[0, 0, Math.PI / 2]}>\n              <meshStandardMaterial \n                color=\"#444\"\n                metalness={0.7}\n                roughness={0.3}\n              />\n            </Cylinder>\n          </group>\n        ))}\n      </group>\n      \n      {/* Scan beams */}\n      <group ref={scanBeamRef}>\n        {/* Primary scan beam */}\n        <Cylinder args={[0.01, 0.01, 3]} position={[0, 0, 0]} rotation={[Math.PI / 2, Math.PI / 4, 0]}>\n          <meshBasicMaterial \n            color=\"#00E5FF\"\n            transparent\n            opacity={0.7}\n          />\n        </Cylinder>\n        \n        {/* Secondary scan beams */}\n        <Cylinder args={[0.008, 0.008, 2.5]} position={[0, 0, 0]} rotation={[Math.PI / 2, (3 * Math.PI) / 4, 0]}>\n          <meshBasicMaterial \n            color=\"#00E5FF\"\n            transparent\n            opacity={0.5}\n          />\n        </Cylinder>\n        \n        <Cylinder args={[0.008, 0.008, 2.5]} position={[0, 0, 0]} rotation={[Math.PI / 2, (5 * Math.PI) / 4, 0]}>\n          <meshBasicMaterial \n            color=\"#7C4DFF\"\n            transparent\n            opacity={0.4}\n          />\n        </Cylinder>\n      </group>\n    </group>\n  );\n}\n","size_bytes":3193},"client/src/three/Scene.tsx":{"content":"import { Suspense } from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { OrbitControls, PerspectiveCamera, Environment, Loader } from \"@react-three/drei\";\nimport Gantry from \"./Gantry\";\n\ninterface SceneProps {\n  className?: string;\n}\n\nexport default function Scene({ className }: SceneProps) {\n  return (\n    <div className={`w-full h-full ${className}`}>\n      <Suspense fallback={<Loader />}>\n        <Canvas\n          shadows\n          gl={{ \n            antialias: true,\n            alpha: true,\n            powerPreference: \"high-performance\"\n          }}\n          camera={{ position: [0, 0, 6], fov: 50 }}\n          className=\"w-full h-full bg-transparent\"\n        >\n          <PerspectiveCamera makeDefault position={[0, 0, 6]} fov={50} />\n          <OrbitControls\n            enableZoom={false}\n            enablePan={false}\n            enableRotate={false}\n            autoRotate\n            autoRotateSpeed={1}\n          />\n          \n          <Environment preset=\"city\" />\n          \n          {/* Enhanced lighting setup */}\n          <ambientLight intensity={0.1} />\n          <directionalLight\n            position={[10, 10, 5]}\n            intensity={0.5}\n            color=\"#00E5FF\"\n            castShadow\n          />\n          <pointLight\n            position={[-10, -10, -5]}\n            intensity={0.3}\n            color=\"#7C4DFF\"\n          />\n          <spotLight\n            position={[0, 15, 0]}\n            angle={0.3}\n            penumbra={1}\n            intensity={1}\n            color=\"#ffffff\"\n            castShadow\n          />\n          \n          <Gantry />\n          \n          <fog attach=\"fog\" args={[\"#000000\", 5, 15]} />\n        </Canvas>\n      </Suspense>\n    </div>\n  );\n}\n","size_bytes":1729},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}